"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[189],{5189:(n,e,o)=>{o.r(e),o.d(e,{default:()=>u});var t=o(5043),s=o(5616),a=o(5719),r=o(579);const l="\nimport React, {useRef} from \"react\";\nimport {ShowBsrDialog,BaseBodyDialog} from \"bsr-modaldialog\";\nimport 'bsr-modaldialog/dist/index.css'\n\nclass BodyDialog extends BaseBodyDialog {\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * Checking the completion of data, making a decision to continue\n     * @param mode data-mode attribute value\n     * @returns {boolean} true - continue false break\n     */\n    validate(mode) {\n        return true\n    }\n\n\n    /**\n     * Receiving data from a dialog to pass it outside\n     * @param mode data-mode attribute value\n     * @returns {object} data body\n     */\n    getData(mode) {\n\n        return {\n            data: 'self close',\n            mode: mode\n        }\n\n    }\n\n    selfClose(mode) {\n        super.selfClose(mode);\n    }\n\n\n    render() {\n        return (\n            <button onClick={() => {\n                this.selfClose('123')\n            }}> Self Close (mode:123)</button>\n        )\n    }\n}\n\n",d="\n\nexport function P4_11() {\n    const mRefLabel = useRef();\n\n    return (\n        <>\n            <label ref={mRefLabel}></label>\n            <br/>\n\n            <button onClick={() => {\n                mRefLabel.current.innerText = ''\n                \n                ShowBsrDialog({\n                    modal: true,\n                    header: (<span style={{paddingLeft: 10}}>Dialog SelfClose</span>),\n                    body: <BodyDialog/>,\n                    styleBody: {padding: 20},\n                    buttons: [\n                        (<button data-mode={1}>ok</button>),\n                        (<button data-mode={-1}>close</button>)\n                    ]\n                }).then(a => {\n                    mRefLabel.current.innerText = JSON.stringify(a)\n                })\n                \n            }}>show\n            </button>\n        </>\n    )\n}\n";class i extends s.qk{constructor(n){super(n)}validate(n){return!0}getData(n){return{data:"self close",mode:n}}selfClose(n){super.selfClose(n)}render(){return(0,r.jsx)("button",{onClick:()=>{this.selfClose("123")},children:" Self Close (mode:123)"})}}function u(){const n=(0,t.useRef)();return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("p",{children:["Self close:",(0,r.jsx)("br",{}),"1. call SelfClose.",(0,r.jsx)("br",{}),"2. call validate.",(0,r.jsx)("br",{}),"3. call getData.",(0,r.jsx)("br",{}),"4. Formation of a promise.",(0,r.jsx)("br",{}),"5. Closing the dialogue.",(0,r.jsx)("br",{})]}),(0,r.jsx)("label",{className:"label-then",ref:n}),(0,r.jsx)("br",{})," ",(0,r.jsx)("br",{}),(0,r.jsx)("button",{onClick:()=>{n.current.innerText="",(0,s.fG)({modal:!0,header:(0,r.jsx)("span",{style:{paddingLeft:10},children:"Dialog SelfClose"}),body:(0,r.jsx)(i,{}),styleBody:{padding:20},buttons:[(0,r.jsx)("button",{"data-mode":1,children:"ok"}),(0,r.jsx)("button",{"data-mode":-1,children:"close"})]}).then((e=>{n.current.innerText=JSON.stringify(e)}))},children:"show"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{children:(0,r.jsx)(a.MM,{code:l})}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{children:(0,r.jsx)(a.MM,{code:d})})]})}}}]);
//# sourceMappingURL=189.1fcd5d74.chunk.js.map