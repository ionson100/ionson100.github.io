{"version":3,"file":"static/js/6454.3b56ab70.chunk.js","mappings":"8LAIe,SAASA,IACpB,OAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBACXC,EAAAA,EAAAA,KAAA,OAAAD,UACAC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,8oBAmBvBF,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,cAAUC,EAAAA,EAAAA,KAAA,SAAK,gGAE8EA,EAAAA,EAAAA,KAAA,SAAK,6CACxDA,EAAAA,EAAAA,KAAA,SAAK,gFAC8BA,EAAAA,EAAAA,KAAA,SAAK,8FACSA,EAAAA,EAAAA,KAAA,SAAK,sHAEnGA,EAAAA,EAAAA,KAAA,OAAAD,UACAC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,86BA6CvBF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBACHC,EAAAA,EAAAA,KAAA,OAAAD,UACAC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,89BAkC3B,C","sources":["ViewStorage/menu/orm/6-3.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function P6_3(){\r\n    return(\r\n\r\n        <>\r\n            <p> standard: </p>\r\n    <div>\r\n    <CodeSnippetDotNet code={`\r\nusing var session = Configure.Session;\r\nvar mClass = new MyClass { Name = \"Name1\" };\r\n\r\nvar res=session.Insert(mClass);\r\nConsole.WriteLine($\"insert: {res}\");\r\n//ORM: INSERT INTO \"m_t_123\" (\"name\") VALUES (@p1)  RETURNING \"Id\"; params:  @p1='Name1' \r\n\r\nmClass = session.Query<MyClass>().First();\r\nmClass.Name = \"Name2\";\r\nres = session.Update(mClass);\r\nConsole.WriteLine($\"update: {res}\");\r\n//ORM: UPDATE \"m_t_123\" SET  \"name\" = @p1 WHERE \"Id\" = @p2 ; params:  @p1='Name2'  @p2=1 \r\n\r\nres = session.Delete(mClass);\r\nConsole.WriteLine($\"delete: {res}\");\r\n//ORM: DELETE FROM \"m_t_123\" WHERE \"m_t_123\".\"Id\" = @p1 params:  @p1=1 \r\n                `}/>\r\n    </div>\r\n    <br/>\r\n    <p> Use Save:<br/>\r\n\r\n        Sometimes in the process of work we cannot determine what we need to do to insert or update.<br/>\r\n        In this case, we can use the Save method,<br/>\r\n        the program itself will decide what to do with the object: update or insert.<br/>\r\n        To do this, the object type must be marked with the MapUsagePersistentAttribute attribute.<br/>\r\n        Please note that using this attribute lengthens the time required to fetch large data arrays from the database!</p>\r\n    <div>\r\n    <CodeSnippetDotNet code={`\r\n[MapUsagePersistent]//!!\r\n[MapTable(\"m_t_123\")]\r\nclass MyClass\r\n{\r\n     [MapPrimaryKey( Generator.Native)]\r\n     public long Id { get; set; } \r\n\r\n     [MapColumn(\"name\")]\r\n     public string? Name { get; set; }\r\n}\r\nusing var session = Configure.Session;\r\nvar mClass = session.Query<MyClass>().First();\r\nmClass.Name = \"Name2\";\r\n//... \r\n//...\r\n//there is a lot of code where we can forget where \r\n//this object comes from: from the database or new\r\n//... \r\n\r\nvar res = session.Save(mClass);\r\nConsole.WriteLine($\"save: {res}\");\r\n\r\n\r\n//When using the MapUsagePersistentAttribute attribute, \r\n//you can already determine where the object came from\r\n\r\nif (session.IsPersistent(mClass))\r\n{\r\n    session.Update(mClass);// from database\r\n}\r\nelse\r\n{\r\n    session.Insert(mClass);// as new\r\n}\r\n\r\n//We can also mark the new object as if we got it from the database\r\nmClass = new MyClass();\r\nsession.ToPersistent(mClass);\r\n\r\n\r\n \r\n                `}/>\r\n    </div>\r\n\r\n    <p> Link to Sql: </p>\r\n    <div>\r\n    <CodeSnippetDotNet code={`\r\nusing var session = Configure.Session;\r\nvar res=session.Query<MyClass>().Delete(a => a.Id == 1);\r\nConsole.WriteLine($\"delete by id: {res}\");\r\n//ORM: DELETE FROM \"m_t_123\" WHERE (\"m_t_123\".\"Id\" = 1);\r\n\r\n\r\nusing var session = Configure.Session;\r\n var res=session.Query<MyClass>().Where(a=>a.Id==1).Update(s=>new Dictionary<object, object>\r\n {\r\n     {s.Name,\"new Name\"},\r\n     ...,\r\n     ...,\r\n });\r\nConsole.WriteLine($\"update  by id : {res}\");\r\n//ORM: UPDATE  \"m_t_123\" SET  \"name\" = @p1    WHERE  (\"Id\" = 1) ; params:  @p1='new Name' \r\n\r\n// as raw sql UpdateSql\r\nusing var session = Configure.Session;\r\n\r\nvar res = session.Query<MyClass>().Where(d=>d.Id==1)\r\n    .UpdateSql(a => $\"{a.Name}=@1 , {a.DateTime} = @2\", \r\n        new SqlParam(\"@1\", \"test name\"),new SqlParam(\"@2\",DateTime.Now));\r\nConsole.WriteLine($\"update  : {res}\");\r\n//UPDATE  \"m_t_123\" SET  \"name\"=@1 , \"date\" = @2    WHERE  (\"Id\" = 1) ;\r\n//params:  @1='test name'  @2=6/26/2024 11:56:17 AM  \r\n                `}/>\r\n    </div>\r\n\r\n    </>\r\n\r\n\r\n\r\n)\r\n}"],"names":["P6_3","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code"],"sourceRoot":""}