{"version":3,"file":"static/js/3012.92968b27.chunk.js","mappings":"6LAIe,SAASA,IACpB,OAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBACHC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,grrCA0uBvC,C","sources":["ViewStorage/menu/orm/6-16.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function P6_16() {\r\n    return (\r\n\r\n        <>\r\n            <p> IGeoShape: </p>\r\n            <div>\r\n                <CodeSnippetDotNet code={` /// <summary>\r\n /// Geo Object\r\n /// </summary>\r\n public interface IGeoShape:ICloneable\r\n {\r\n\r\n     /// <summary>\r\n     /// Quickly set value Spatial Reference System Identifier\r\n     /// </summary>\r\n     IGeoShape SetSrid(int srid);\r\n\r\n     /// <summary>\r\n     /// Type Geo Object\r\n     /// </summary>\r\n     GeoType GeoType { get; }\r\n\r\n     /// <summary>\r\n     /// List template points. For only MultiPoint Point,LineString,Polygon.\r\n     /// </summary>\r\n     List<GeoPoint> ListGeoPoints { get; }\r\n\r\n     /// <summary>\r\n     /// Return Full GeoJson when property value. For empty objects, return null\r\n     /// </summary>\r\n     object GetGeoJson(object properties = null);\r\n\r\n     /// <summary>\r\n     /// List geo object. For only MultiLineString, MultiPolygon, GeometryCollection.\r\n     /// </summary>\r\n     List<IGeoShape> MultiGeoShapes { get; }\r\n\r\n     /// <summary>\r\n     /// Returns the OGC Well-Known Text (WKT) representation of the geometry.\r\n     /// </summary>\r\n     string StAsText();\r\n\r\n     /// <summary>\r\n     /// Returns the type of the geometry as a string.\r\n     /// EG postgres: 'ST_LineString', 'ST_Polygon','ST_MultiPolygon'\r\n     /// EG mysql ms sql: 'LineString', 'Polygon','MultiPolygon'.\r\n     /// </summary>\r\n     string StGeometryType();\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the type of the geometry as a string.\r\n     /// EG postgres: 'ST_LineString', 'ST_Polygon','ST_MultiPolygon'\r\n     /// EG mysql ms sql: 'LineString', 'Polygon','MultiPolygon'\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<string> StGeometryTypeAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the area of a polygonal geometry. For geometry types a 2D Cartesian (planar) area is computed, with units specified by the SRID\r\n     /// </summary>\r\n     double? StArea();\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the area of a polygonal geometry. For geometry types a 2D Cartesian (planar) area is computed, with units specified by the SRID\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<double?> StAreaAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if current geometry  is within geometry B. current geometry is within B if and only if all points of current geometry lie inside (i.e. in the interior or boundary of) B\r\n     /// (or equivalently, no points of current geometry lie in the exterior of B), and the interiors of current geometry and B have at least one point in common.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Geometry B</param>\r\n     bool? StWithin(IGeoShape shape);\r\n\r\n\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if current geometry  is within geometry B. current geometry is within B if and only if all points of current geometry lie inside (i.e. in the interior or boundary of) B\r\n     /// (or equivalently, no points of current geometry lie in the exterior of B), and the interiors of current geometry and B have at least one point in common.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Geometry B</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StWithinAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the OGC/ISO Well-Known Binary (WKB) representation of the geometry.\r\n     /// </summary>\r\n     byte[] StAsBinary();\r\n\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the OGC/ISO Well-Known Binary (WKB) representation of the geometry.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<byte[]> StAsBinaryAsync(CancellationToken cancellationToken = default);\r\n\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the closure of the combinatorial boundary of this Geometry.\r\n     /// The combinatorial boundary is defined as described in section 3.12.3.2 of the OGC SPEC.\r\n     /// Because the result of this function is a closure, and hence topologically closed, the resulting boundary\r\n     /// can be represented using representational geometry primitives as discussed in the OGC SPEC, section 3.12.2.\r\n     /// </summary>\r\n     IGeoShape StBoundary();\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the closure of the combinatorial boundary of this Geometry.\r\n     /// The combinatorial boundary is defined as described in section 3.12.3.2 of the OGC SPEC.\r\n     /// Because the result of this function is a closure, and hence topologically closed, the resulting boundary\r\n     /// can be represented using representational geometry primitives as discussed in the OGC SPEC, section 3.12.2.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StBoundaryAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Computes a POLYGON or MULTIPOLYGON that represents all points whose distance from a geometry/geography is less than or equal to a given distance.\r\n     /// A negative distance shrinks the geometry rather than expanding it. A negative distance may shrink a polygon completely,\r\n     /// in which case POLYGON EMPTY is returned. For points and lines negative distances always return empty results.\r\n     /// For geometry, the distance is specified in the units of the Spatial Reference System of the geometry.For geography, the distance is specified in meters.\r\n     /// </summary>\r\n     /// <param name=\"distance\"></param>\r\n     IGeoShape StBuffer(float distance);\r\n\r\n\r\n     /// <summary>\r\n     /// Computes a POLYGON or MULTIPOLYGON that represents all points whose distance from a geometry/geography is less than or equal to a given distance.\r\n     /// A negative distance shrinks the geometry rather than expanding it. A negative distance may shrink a polygon completely,\r\n     /// in which case POLYGON EMPTY is returned. For points and lines negative distances always return empty results.\r\n     /// For geometry, the distance is specified in the units of the Spatial Reference System of the geometry.For geography, the distance is specified in meters.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"distance\"></param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StBufferAsync(float distance, CancellationToken cancellationToken = default);\r\n\r\n\r\n     /// <summary>\r\n     /// Computes a point which is the geometric center of mass of a geometry.\r\n     /// For [MULTI]POINTs, the centroid is the arithmetic mean of the input coordinates.\r\n     /// For [MULTI]LINESTRINGs, the centroid is computed using the weighted length of each line segment.\r\n     /// For [MULTI]POLYGONs, the centroid is computed in terms of area.\r\n     /// If an empty geometry is supplied, an empty GEOMETRYCOLLECTION is returned. If NULL is supplied, NULL is returned.\r\n     /// If CIRCULARSTRING or COMPOUNDCURVE are supplied, they are converted to linestring with CurveToLine first, then same than for LINESTRING.\r\n     /// </summary>\r\n     IGeoShape StCentroid();\r\n\r\n\r\n     /// <summary>\r\n     /// Computes a point which is the geometric center of mass of a geometry.\r\n     /// For [MULTI]POINTs, the centroid is the arithmetic mean of the input coordinates.\r\n     /// For [MULTI]LINESTRINGs, the centroid is computed using the weighted length of each line segment.\r\n     /// For [MULTI]POLYGONs, the centroid is computed in terms of area.\r\n     /// If an empty geometry is supplied, an empty GEOMETRYCOLLECTION is returned. If NULL is supplied, NULL is returned.\r\n     /// If CIRCULARSTRING or COMPOUNDCURVE are supplied, they are converted to linestring with CurveToLine first, then same than for LINESTRING.\r\n     ///  Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StCentroidAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the last point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT. Returns NULL if the input is not a LINESTRING or CIRCULARLINESTRING.\r\n     /// </summary>\r\n     IGeoShape StEndPoint();\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the last point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT. Returns NULL if the input is not a LINESTRING or CIRCULARLINESTRING.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n\r\n     Task<IGeoShape> StEndPointAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the minimum axis-aligned bounding rectangle of the instance.\r\n     /// </summary>\r\n     IGeoShape StEnvelope();\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the minimum axis-aligned bounding rectangle of the instance.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StEnvelopeAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the first point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT.\r\n     /// Returns NULL if the input is not a LINESTRING or CIRCULARLINESTRING.\r\n     /// </summary>\r\n     IGeoShape StStartPoint();\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the first point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT.\r\n     /// Returns NULL if the input is not a LINESTRING or CIRCULARLINESTRING.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StStartPointAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns an object that represents all points that are either in one geometry instance or another geometry instance,\r\n     /// but not those points that lie in both instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     IGeoShape StSymDifference(IGeoShape shape);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns an object that represents all points that are either in one geometry instance or another geometry instance,\r\n     /// but not those points that lie in both instances.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StSymDifferenceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns an object that represents the union of a geometry instance with another geometry instance.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     IGeoShape StUnion(IGeoShape shape);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns an object that represents the union of a geometry instance with another geometry instance.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StUnionAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if current geometry  contains geometry B. \r\n     /// </summary>\r\n     /// <param name=\"shape\">Geometry B</param>\r\n     bool? StContains(IGeoShape shape);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if current geometry  contains geometry B.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Geometry B</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StContainsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Compares two geometry objects and returns true if their intersection \"spatially crosses\"; that is, the geometries have some, but not all interior points in common.\r\n     /// The intersection of the interiors of the geometries must be non-empty and must have dimension less than the maximum dimension of the two input geometries,\r\n     /// and the intersection of the two geometries must not equal either geometry. Otherwise, it returns false.\r\n     /// The crosses relation is symmetric and irreflexive.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     bool? StCrosses(IGeoShape shape);\r\n\r\n\r\n     /// <summary>\r\n     /// Compares two geometry objects and returns true if their intersection \"spatially crosses\"; that is, the geometries have some, but not all interior points in common.\r\n     /// The intersection of the interiors of the geometries must be non-empty and must have dimension less than the maximum dimension of the two input geometries,\r\n     /// and the intersection of the two geometries must not equal either geometry. Otherwise, it returns false.\r\n     /// The crosses relation is symmetric and irreflexive.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StCrossesAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns a geometry representing the part of geometry A that does not intersect geometry B.\r\n     /// This is equivalent to A - ST_Intersection(A,B).\r\n     /// If A is completely contained in B then an empty atomic geometry of appropriate type is returned.\r\n     /// Where geometry A - current geo object, geometry B other geo object.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     IGeoShape StDifference(IGeoShape shape);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns a geometry representing the part of geometry A that does not intersect geometry B.\r\n     /// This is equivalent to A - ST_Intersection(A,B).\r\n     /// If A is completely contained in B then an empty atomic geometry of appropriate type is returned.\r\n     /// Where geometry A - current geo object, geometry B other geo object.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StDifferenceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Return the topological dimension of this Geometry object, which must be less than or equal to the coordinate dimension\r\n     /// </summary>\r\n     int? StDimension();\r\n\r\n     /// <summary>\r\n     ///  Return the topological dimension of this Geometry object, which must be less than or equal to the coordinate dimension\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<int?> StDimensionAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns true if two geometries are disjoint. Geometries are disjoint if they have no point in common.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     bool? StDisjoint(IGeoShape shape);\r\n\r\n     /// <summary>\r\n     ///  Returns true if two geometries are disjoint. Geometries are disjoint if they have no point in common.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StDisjointAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// For geometry types returns the minimum 2D Cartesian (planar) distance between two geometries, in projected units (spatial ref units).\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     double? StDistance(IGeoShape shape);\r\n\r\n     /// <summary>\r\n     /// For geometry types returns the minimum 2D Cartesian (planar) distance between two geometries, in projected units (spatial ref units).\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<double?> StDistanceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n\r\n\r\n\r\n     /// <summary>\r\n     /// Returns true if the given geometries are \"topologically equal\".\r\n     /// Use this for a 'better' answer than '='.\r\n     /// Topological equality means that the geometries have the same dimension, and their point-sets occupy the same space.\r\n     /// This means that the order of vertices may be different in topologically equal geometries.\r\n     /// To verify the order of points is consistent use ST_OrderingEquals (it must be noted ST_OrderingEquals is a little more stringent than simply verifying order of points are the same).\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     bool? StEquals(IGeoShape shape);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns true if the given geometries are \"topologically equal\".\r\n     /// Use this for a 'better' answer than '='.\r\n     /// Topological equality means that the geometries have the same dimension, and their point-sets occupy the same space.\r\n     /// This means that the order of vertices may be different in topologically equal geometries.\r\n     /// To verify the order of points is consistent use ST_OrderingEquals (it must be noted ST_OrderingEquals is a little more stringent than simply verifying order of points are the same).\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StEqualsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns true if two geometries intersect. Geometries intersect if they have any point in common.\r\n     /// For geography, a distance tolerance of 0.00001 meters is used (so points that are very close are considered to intersect).\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     bool? StIntersects(IGeoShape shape);\r\n\r\n     /// <summary>\r\n     /// Returns true if two geometries intersect. Geometries intersect if they have any point in common.\r\n     /// For geography, a distance tolerance of 0.00001 meters is used (so points that are very close are considered to intersect).\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StIntersectsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if geometry A and B \"spatially overlap\".\r\n     /// Two geometries overlap if they have the same dimension, their interiors intersect in that dimension.\r\n     /// and each has at least one point inside the other (or equivalently, neither one covers the other).\r\n     /// The overlaps relation is symmetric and irreflexive.\r\n     /// Where geometry A - current geo object, geometry B - other geo object.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     bool? StOverlaps(IGeoShape shape);\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if geometry A and B \"spatially overlap\".\r\n     /// Two geometries overlap if they have the same dimension, their interiors intersect in that dimension.\r\n     /// and each has at least one point inside the other (or equivalently, neither one covers the other).\r\n     /// The overlaps relation is symmetric and irreflexive.\r\n     /// Where geometry A - current geo object, geometry B - other geo object.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StOverlapsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     int? StSrid();\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if A and B intersect, but their interiors do not intersect.\r\n     /// Equivalently, A and B have at least one point in common, and the common points lie in at least one boundary.\r\n     /// For Point/Point inputs the relationship is always FALSE, since points do not have a boundary.\r\n     /// Where A - current geo object, B - other geo object.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     bool? StTouches(IGeoShape shape);\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if A and B intersect, but their interiors do not intersect.\r\n     /// Equivalently, A and B have at least one point in common, and the common points lie in at least one boundary.\r\n     /// For Point/Point inputs the relationship is always FALSE, since points do not have a boundary.\r\n     /// Where A - current geo object, B - other geo object\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"shape\">Other geo object</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StTouchesAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the number of elements in a geometry collection (GEOMETRYCOLLECTION or MULTI*).\r\n     /// For non-empty atomic geometries returns 1. For empty geometries returns 0.\r\n     /// </summary>\r\n     int? StNumGeometries();\r\n\r\n     /// <summary>\r\n     /// Returns the number of elements in a geometry collection (GEOMETRYCOLLECTION or MULTI*).\r\n     /// For non-empty atomic geometries returns 1. For empty geometries returns 0.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<int?> StNumGeometriesAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Return the number of interior rings of a polygon geometry. Return NULL if the geometry is not a polygon.\r\n     /// </summary>\r\n     int? StNumInteriorRing();\r\n     \r\n     /// <summary>\r\n     ///  Return the number of interior rings of a polygon geometry. Return NULL if the geometry is not a polygon.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<int?> StNumInteriorRingAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns true if this Geometry has no anomalous geometric points, such as self-intersection or self-tangency.\r\n     /// </summary>\r\n\r\n     bool? StIsSimple();\r\n\r\n     /// <summary>\r\n     /// Returns true if this Geometry has no anomalous geometric points, such as self-intersection or self-tangency.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StIsSimpleAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Tests if an current geometry  is well-formed and valid in 2D according to the OGC rules.\r\n     /// </summary>\r\n     bool? StIsValid();\r\n\r\n     /// <summary>\r\n     /// Tests if an current geometry  is well-formed and valid in 2D according to the OGC rules.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StIsValidAsync(CancellationToken cancellationToken = default);\r\n\r\n\r\n     /// <summary>\r\n     /// For geometry types: returns the 2D Cartesian length of the geometry if it is a LineString, MultiLineString, ST_Curve, ST_MultiCurve.\r\n     /// For areal geometries 0 is returned; use ST_Perimeter instead.\r\n     /// The units of length is determined by the spatial reference system of the geometry.\r\n     /// </summary>\r\n     double? StLength();\r\n\r\n     /// <summary>\r\n     /// For geometry types: returns the 2D Cartesian length of the geometry if it is a LineString, MultiLineString, ST_Curve, ST_MultiCurve.\r\n     /// For areal geometries 0 is returned; use ST_Perimeter instead.\r\n     /// The units of length is determined by the spatial reference system of the geometry.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<double?> StLengthAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if the LINESTRING's start and end points are coincident. For Polyhedral Surfaces, reports if the surface is areal (open) or volumetric (closed).\r\n     /// </summary>\r\n     bool? StIsClosed();\r\n\r\n     /// <summary>\r\n     /// Returns TRUE if the LINESTRING's start and end points are coincident.\r\n     /// For Polyhedral Surfaces, reports if the surface is areal (open) or volumetric (closed).\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<bool?> StIsClosedAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Return the number of points in an LineString or CircularString value.\r\n     /// </summary>\r\n     int? StNumPoints();\r\n\r\n     /// <summary>\r\n     /// Return the number of points in an LineString or CircularString value.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<int?> StNumPointsAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the 2D perimeter of the geometry/geography if it is a ST_Surface, ST_MultiSurface (Polygon, MultiPolygon). 0 is returned for non-areal geometries.\r\n     /// For linear geometries use ST_Length. For geometry types, units for perimeter measures are specified by the spatial reference system of the geometry.\r\n     /// </summary>\r\n     double? StPerimeter();\r\n\r\n     /// <summary>\r\n     /// Returns the 2D perimeter of the geometry/geography if it is a ST_Surface, ST_MultiSurface (Polygon, MultiPolygon). 0 is returned for non-areal geometries.\r\n     /// For linear geometries use ST_Length. For geometry types, units for perimeter measures are specified by the spatial reference system of the geometry.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<double?> StPerimeterAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns a new geometry whose coordinates are translated delta x,delta y.\r\n     /// Units are based on the units defined in spatial reference (SRID) for this geometry.\r\n     /// </summary>\r\n     /// <param name=\"deltaX\">Coordinate x</param>\r\n     /// <param name=\"deltaY\">Coordinate y</param>\r\n     IGeoShape StTranslate(float deltaX, float deltaY);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns a new geometry whose coordinates are translated delta x,delta y.\r\n     /// Units are based on the units defined in spatial reference (SRID) for this geometry.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"deltaX\">Coordinate x</param>\r\n     /// <param name=\"deltaY\">Coordinate y</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StTranslateAsync(float deltaX, float deltaY, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Initializing an object with an ORM session\r\n     /// </summary>\r\n     /// <param name=\"session\">Open session orm</param>\r\n     IGeoShape SetSession(ISession session);\r\n\r\n\r\n     /// <summary>\r\n     /// Computes the convex hull of a geometry. The convex hull is the smallest convex geometry that encloses all geometries in the input.\r\n     /// </summary>\r\n     IGeoShape StConvexHull();\r\n\r\n     /// <summary>\r\n     /// Computes the convex hull of a geometry. The convex hull is the smallest convex geometry that encloses all geometries in the input.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StConvexHullAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Collects geometries into a geometry collection. The result is either a Multi* or a GeometryCollection,\r\n     /// depending on whether the input geometries have the same or different types (homogeneous or heterogeneous).\r\n     /// The input geometries are left unchanged within the collection.\r\n     /// </summary>\r\n     /// <param name=\"shapes\"></param>\r\n     IGeoShape StCollect(params IGeoShape[] shapes);\r\n\r\n     /// <summary>\r\n     /// Return the Nth point in a single linestring or circular linestring in the geometry.\r\n     /// Negative values are counted backwards from the end of the LineString, so that -1 is the last point. Returns NULL if there is no linestring in the geometry.\r\n     /// </summary>\r\n     /// <param name=\"n\">Number point</param>\r\n     IGeoShape StPointN(int n);\r\n\r\n     /// <summary>\r\n     /// Return the Nth point in a single linestring or circular linestring in the geometry.\r\n     /// Negative values are counted backwards from the end of the LineString, so that -1 is the last point. Returns NULL if there is no linestring in the geometry.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"n\">Number point</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StPointNAsync(int n, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns a POINT which is guaranteed to lie in the interior of a surface (POLYGON, MULTIPOLYGON, and CURVED POLYGON).\r\n     /// In PostGIS this function also works on line and point geometries.\r\n     /// </summary>\r\n     /// <returns></returns>\r\n     IGeoShape StPointOnSurface();\r\n\r\n     /// <summary>\r\n     /// Returns a POINT which is guaranteed to lie in the interior of a surface (POLYGON, MULTIPOLYGON, and CURVED POLYGON).\r\n     /// In PostGIS this function also works on line and point geometries.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StPointOnSurfaceAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns the Nth interior ring (hole) of a POLYGON geometry as a LINESTRING. The index starts at 1.\r\n     /// Returns NULL if the geometry is not a polygon or the index is out of range.\r\n     /// </summary>\r\n     IGeoShape StInteriorRingN(int n);\r\n\r\n\r\n     /// <summary>\r\n     /// Returns the Nth interior ring (hole) of a POLYGON geometry as a LINESTRING. The index starts at 1.\r\n     /// Returns NULL if the geometry is not a polygon or the index is out of range.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"n\"></param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StInteriorRingNAsync(int n, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Return the X coordinate of the point, or NULL if not available. Input must be a point.\r\n     /// </summary>\r\n     double? StX();\r\n\r\n     /// <summary>\r\n     /// Return the X coordinate of the point, or NULL if not available. Input must be a point.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<double?> StXAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Return the Y coordinate of the point, or NULL if not available. Input must be a point.\r\n     /// </summary>\r\n     double? StY();\r\n\r\n     /// <summary>\r\n     ///  Return the Y coordinate of the point, or NULL if not available. Input must be a point.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<double?> StYAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns a new geometry with its coordinates transformed to a different spatial reference system.\r\n     /// </summary>\r\n     /// <param name=\"srid\">Spatial reference system</param>\r\n     IGeoShape StTransform(int srid);\r\n\r\n     /// <summary>\r\n     /// Returns a new geometry with its coordinates transformed to a different spatial reference system.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"srid\"></param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StTransformAsync(int srid, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Sets the SRID on a geometry to a particular integer value.\r\n     /// </summary>\r\n     /// <param name=\"srid\">Spatial reference system</param>\r\n     // ReSharper disable once InconsistentNaming\r\n     IGeoShape StSetSRID(int srid);\r\n\r\n     /// <summary>\r\n     /// Returns the Degrees, Minutes, Seconds representation of the point.\r\n     /// </summary>\r\n     /// <param name=\"format\">The text parameter is a format string containing the format for the resulting text, similar to a date format string\r\n     /// as 'D°M''S.SSS\"C'</param>\r\n     string StAsLatLonText(string format = null);\r\n\r\n     /// <summary>\r\n     /// Returns the Degrees, Minutes, Seconds representation of the point.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"format\">The text parameter is a format string containing the format for the resulting text, similar to a date format string\r\n     /// as 'D°M''S.SSS\"C'</param>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<object> StAsLatLonTextAsync(string format, CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Reverse points current geometry\r\n     /// </summary>\r\n     IGeoShape StReverse();\r\n\r\n     /// <summary>\r\n     /// Reverse points current geometry.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StReverseAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns text stating if a geometry is valid, or if invalid a reason why.\r\n     /// Useful in combination with ST_IsValid to generate a detailed report of invalid geometries and reasons.\r\n     /// </summary>\r\n     string StIsValidReason();\r\n\r\n     /// <summary>\r\n     /// Returns text stating if a geometry is valid, or if invalid a reason why.\r\n     /// Useful in combination with ST_IsValid to generate a detailed report of invalid geometries and reasons.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<string> StIsValidReasonAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// The function attempts to create a valid representation of a given invalid geometry without losing any of the input vertices.\r\n     /// Valid geometries are returned unchanged.\r\n     ///Supported inputs are: POINTS, MULTIPOINTS, LINESTRINGS, MULTILINESTRINGS, POLYGONS, MULTIPOLYGONS and GEOMETRYCOLLECTIONS containing any mix of them.\r\n     /// </summary>\r\n     IGeoShape StMakeValid();\r\n\r\n\r\n     /// <summary>\r\n     /// The function attempts to create a valid representation of a given invalid geometry without losing any of the input vertices.\r\n     /// Valid geometries are returned unchanged.\r\n     ///Supported inputs are: POINTS, MULTIPOINTS, LINESTRINGS, MULTILINESTRINGS, POLYGONS, MULTIPOLYGONS and GEOMETRYCOLLECTIONS containing any mix of them.\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<IGeoShape> StMakeValidAsync(CancellationToken cancellationToken = default);\r\n\r\n     /// <summary>\r\n     /// Returns a geometry as string  GeoJSON \r\n     /// </summary>\r\n     string StAsGeoJson();\r\n\r\n     /// <summary>\r\n     /// Returns a geometry as string  GeoJSON\r\n     /// Cannot be used in expression trees. Only on object instances.\r\n     /// </summary>\r\n     /// <param name=\"cancellationToken\">Operation cancellation token</param>\r\n     Task<string> StAsGeoJsonAsync(CancellationToken cancellationToken = default);\r\n\r\n }`}/>\r\n            </div>\r\n\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}"],"names":["P6_16","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code"],"sourceRoot":""}