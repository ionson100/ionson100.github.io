"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[8329],{88329:(n,e,t)=>{t.r(e),t.d(e,{default:()=>u});var o=t(65043),l=t(53180),r=(t(93221),t(1141)),i=t(70579);const s='import React, {useRef} from "react";\nimport {CellFooter, Column, ColumnGroup, DataRow, RowFooter, Table} from "bsr-table-extension";\nimport \'bsr-table-extension/dist/index.css\'\n\ntype User = {\n    firstName: string\n    lastName: string\n    email: string\n    age: number\n}\nconst list: DataRow<User, User>[] = []\n\nfunction fill(count: number) {\n    list.length = 0\n    for (let i = 0; i < count; i++) {\n        const user: User = {\n            age: 5 + i,\n            email: "user" + i + "@user.com",\n            firstName: "User" + i,\n            lastName: "User LN:" + i\n        }\n        list.push({\n            tag: user,\n            getView: () => {\n                return user\n            }\n        })\n    }\n    return list\n}\n\nexport default function P19_8() {\n\n    const refTable = useRef<Table>(null)\n    return (\n        <>\n            <button onClick={() => {\n                fill(0);\n                refTable.current?.Refresh()\n            }}>0 row\n            </button>\n\n            <button onClick={() => {\n                fill(5);\n                refTable.current?.Refresh()\n            }}>10 row\n            </button>\n            \n            <button onClick={() => {\n                fill(30);\n                refTable.current?.Refresh()\n            }}>30 row\n            </button>\n\n            <button onClick={() => {\n                refTable.current!.height = 400\n            }}>scrolling\n            </button>\n            \n            <button onClick={() => {\n                refTable.current!.height = undefined\n\n            }}>no scrolling\n            </button>\n\n            <Table\n                caption={\' Shift Ctrl - click, ArrayUP ArrayDown,Enter\'}\n                useRowSelection\n                onSelect={(map)=>{\n                    console.log("select", map)\n                }}\n                onClickColumn={(name,eventTarget,eventKey)=>{\n                    console.log(\'clickHeader\', name,eventTarget,eventKey)\n                }}\n\n                onClickRow={(dataRow,e)=>{\n                    console.log(\'clickRow\', dataRow,e);\n                }}\n\n                onClickCell={(name,eventTarget,eventKey)=>{\n                    console.log(\'clickCell\', name,eventTarget,eventKey)\n                }}\n                ref={refTable} rowItems={list}\n                style={{width: "50%", marginTop: 20}}>\n                <Column nameProperty={\'firstName\'}>First Name</Column>\n                <Column nameProperty={\'lastName\'}>Last Name</Column>\n                <ColumnGroup className={\'age\'} style={{textAlign:"center",fontWeight:"bold"}}>\n                    <Column nameProperty={\'age\'} style={{width: "50px"}}>Age</Column>\n                </ColumnGroup>\n                <ColumnGroup style={{color:"green"}}>\n                    <Column nameProperty={\'email\'}>Email</Column>\n                </ColumnGroup>\n                <RowFooter>\n                    <CellFooter colspan={3}>total:</CellFooter>\n                    <CellFooter>{() => {\n                        return refTable.current?.GetItemsRow().length\n                    }}</CellFooter>\n                </RowFooter>\n            </Table>\n        </>\n    )\n}',c=[];function a(n){c.length=0;for(let e=0;e<n;e++){const n={age:5+e,email:"user"+e+"@user.com",firstName:"User"+e,lastName:"User LN:"+e};c.push({tag:n,getView:()=>n})}return c}function u(){const n=(0,o.useRef)(null);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("button",{onClick:()=>{var e;a(0),null===(e=n.current)||void 0===e||e.Refresh()},children:"0 row"}),(0,i.jsx)("button",{onClick:()=>{var e;a(5),null===(e=n.current)||void 0===e||e.Refresh()},children:"10 row"}),(0,i.jsx)("button",{onClick:()=>{var e;a(30),null===(e=n.current)||void 0===e||e.Refresh()},children:"30 row"}),(0,i.jsx)("button",{onClick:()=>{n.current.height=400},children:"scrolling"}),(0,i.jsx)("button",{onClick:()=>{n.current.height=void 0},children:"no scrolling"}),(0,i.jsxs)(l.XI,{caption:" Shift Ctrl - click, ArrayUP ArrayDown,Enter",useRowSelection:!0,onSelect:n=>{console.log("select",n)},onClickColumn:(n,e,t)=>{console.log("clickHeader",n,e,t)},onClickRow:(n,e)=>{console.log("clickRow",n,e)},onClickCell:(n,e,t)=>{console.log("clickCell",n,e,t)},ref:n,rowItems:c,style:{width:"50%",marginTop:20},children:[(0,i.jsx)(l.VP,{nameProperty:"firstName",children:"First Name"}),(0,i.jsx)(l.VP,{nameProperty:"lastName",children:"Last Name"}),(0,i.jsx)(l.oc,{className:"age",style:{textAlign:"center",fontWeight:"bold"},children:(0,i.jsx)(l.VP,{nameProperty:"age",style:{width:"50px"},children:"Age"})}),(0,i.jsx)(l.oc,{style:{color:"green"},children:(0,i.jsx)(l.VP,{nameProperty:"email",children:"Email"})}),(0,i.jsxs)(l._Y,{children:[(0,i.jsx)(l._J,{colspan:3,children:"total:"}),(0,i.jsx)(l._J,{children:()=>{var e;return null===(e=n.current)||void 0===e?void 0:e.GetItemsRow().length}})]})]}),(0,i.jsx)(r.MM,{code:s})]})}}}]);
//# sourceMappingURL=8329.5901375f.chunk.js.map