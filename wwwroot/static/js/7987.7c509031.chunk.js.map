{"version":3,"file":"static/js/7987.7c509031.chunk.js","mappings":"8LAIe,SAASA,IACpB,OAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,sGAAkGC,EAAAA,EAAAA,KAAA,SAAK,wEAE1GH,EAAAA,EAAAA,MAAA,KAAGI,MAAO,CAACC,MAAM,OAAOH,SAAA,CAAC,iBAAaC,EAAAA,EAAAA,KAAA,SAAK,6DACkBA,EAAAA,EAAAA,KAAA,SAAK,+CACnBA,EAAAA,EAAAA,KAAA,SAAK,yEAGpDA,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACG,EAAAA,GAAiB,CAACC,KAAM,kbAc7BJ,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sEAEHC,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,cACVC,EAAAA,EAAAA,KAAA,OAAAD,UAEIC,EAAAA,EAAAA,KAACG,EAAAA,GAAiB,CAACC,KAAM,ohBAqBjCJ,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,WACVC,EAAAA,EAAAA,KAAA,OAAAD,UAEIC,EAAAA,EAAAA,KAACG,EAAAA,GAAiB,CAACC,KAAM,8gBAqBjCJ,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,YACVC,EAAAA,EAAAA,KAAA,OAAAD,UAEIC,EAAAA,EAAAA,KAACG,EAAAA,GAAiB,CAACC,KAAM,0gBAqBjCJ,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,WACVC,EAAAA,EAAAA,KAAA,OAAAD,UAEIC,EAAAA,EAAAA,KAACG,EAAAA,GAAiB,CAACC,KAAM,mfA0B7C,C","sources":["ViewStorage/menu/orm/6-11.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function P6_11() {\r\n    return (\r\n\r\n        <>\r\n            <p> Orm allows you to work simultaneously with multiple databases.(PostgresSql, MySql, SqLite, MSSql)<br/>\r\n                To do this, you need to get the session of the selected database.</p>\r\n            <p style={{color:\"red\"}}>Restrictions.<br/>\r\n                Table mapping types should not intersect with each other,<br/>\r\n                Each database must have its own table type.<br/>\r\n                This is due to a possible collision when constructing SQL queries.</p>\r\n\r\n            <div>\r\n                <CodeSnippetDotNet code={`/// <summary>\r\n///     Getting a session to work with another database\r\n/// </summary>\r\n/// <typeparam name=\"TF\">\r\n///     The type that the interface must implement IOtherDataBaseFactory and\r\n///     have a default constructor\r\n/// </typeparam>\r\n/// <returns></returns>\r\npublic static ISession GetSession<TF>() where TF : IOtherDataBaseFactory, new()\r\n{\r\n  \r\n} \r\nvar sessionOther=Configure.GetSession<IOtherDataBaseFactory>()`}/>\r\n            </div>\r\n            <br/>\r\n            <p>Database Interface Implementation IOtherDataBaseFactory Patterns</p>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >Postgres</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={` public class MyDbPostgres : IOtherDataBaseFactory\r\n {\r\n     private static readonly Lazy<DbProviderFactory> DbProviderFactory =\r\n         new Lazy<DbProviderFactory>(() => Npgsql.NpgsqlFactory.Instance);\r\n     public ProviderName GetProviderName()\r\n     {\r\n         return ProviderName.PostgreSql;\r\n     }\r\n     public string GetConnectionString()\r\n     {\r\n         return \"connectionString\";\r\n     }\r\n\r\n     public DbProviderFactory GetDbProviderFactories()\r\n     {\r\n         return DbProviderFactory.Value;\r\n     }\r\n }`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >MSSql</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={`public class MyDbMsSql : IOtherDataBaseFactory\r\n{\r\n    private static readonly Lazy<DbProviderFactory> DbProviderFactory = \r\n        new Lazy<DbProviderFactory>(() => System.Data.SqlClient.SqlClientFactory.Instance);\r\n    public ProviderName GetProviderName()\r\n    {\r\n        return ProviderName.MsSql;\r\n    }\r\n    public string GetConnectionString()\r\n    {\r\n        return \"connectionString\";\r\n    }\r\n\r\n    public DbProviderFactory GetDbProviderFactories()\r\n    {\r\n        return DbProviderFactory.Value;\r\n    }\r\n}`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >SQLite</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={`public class MyDbSqlite : IOtherDataBaseFactory\r\n{\r\n    private static readonly Lazy<DbProviderFactory> DbProviderFactory = \r\n        new Lazy<DbProviderFactory>(() => System.Data.SQLite.SQLiteFactory.Instance);\r\n    public ProviderName GetProviderName()\r\n    {\r\n        return ProviderName.SqLite;\r\n    }\r\n    public string GetConnectionString()\r\n    {\r\n        return \"connectionString\";\r\n    }\r\n\r\n    public DbProviderFactory GetDbProviderFactories()\r\n    {\r\n        return DbProviderFactory.Value;\r\n    }\r\n}`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >MySql</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={` public  class MyDbMySql : IOtherDataBaseFactory\r\n {\r\n   private static readonly Lazy<DbProviderFactory> DbProviderFactory = \r\n       new Lazy<DbProviderFactory>(() => new MySqlClientFactory());\r\n   public ProviderName GetProviderName()\r\n   {\r\n       return ProviderName.MySql;\r\n   }\r\n   public string GetConnectionString()\r\n   {\r\n       return ConnectionStrings.Mysql;\r\n   }\r\n\r\n   public DbProviderFactory GetDbProviderFactories()\r\n   {\r\n       return DbProviderFactory.Value;\r\n   }\r\n }`}/>\r\n                </div>\r\n            </details>\r\n\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}"],"names":["P6_11","_jsxs","_Fragment","children","_jsx","style","color","CodeSnippetDotNet","code"],"sourceRoot":""}