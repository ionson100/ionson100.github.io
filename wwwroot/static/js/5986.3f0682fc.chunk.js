"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[5986],{95986:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});var a=t(1141),r=t(70579);const s="\n\nimport React from 'react';\nimport AvatarUploader from 'bsr-sau'\nimport 'bsr-sau/dist/index.css'\n\n\nfunction App() {\n\n    const userData={\n        name_file:'default_name.jpg',\n        user_name:'ion100'\n    }\n    return (\n        <div>\n            <AvatarUploader\n            \n                style={{background:\"#e5d7d7\",padding:30}}\n                \n                styleCanvas={{background:\"black\"}}\n                \n                canvasSize={200}\n                \n                url={'/ContentApi/AvatarUpload'}\n                \n                serverError={(r) => {\n                    alert(\"server\\n\"+r)\n                }}\n                \n                selectedFile={(file)=>{\n                    if(file){\n                        userData.name_file=file.name;\n                    }\n                    return true;\n                }}\n                \n                clientError={(e) => {\n                    alert(\"client\\n:\" + e)\n                }}\n                \n                callbackFormData={()=>{\n                    return userData\n                }}\n                \n                done={(dataFromServer)=>{\n                    alert( \"done: server response: \"+dataFromServer)\n                }}\n\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n";function i(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("p",{children:["1. Create project VS: ",(0,r.jsx)("br",{}),"template: Web-API ASP.NET Core, ",(0,r.jsx)("br",{}),"name of the solution in Linux specification format. ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"2. Add project folder name: wwwroot. ",(0,r.jsx)("br",{}),"3. Add project folder name: my_app. ",(0,r.jsx)("br",{}),"4. Folder my_app - create solution React: npx create-react-app. ",(0,r.jsx)("br",{}),"5 Open folder my_app in WebStorm: npm install, npm install --save bsr-sau. ",(0,r.jsx)("br",{}),'6. File package.json add:"proxy": "http://localhost:5203" ',(0,r.jsx)("br",{}),"where http://localhost:5203 from file launchSettings.json VS solution.",(0,r.jsx)("br",{}),"7. React folder solution add file: .env, content: BUILD_PATH='../wwwroot'",(0,r.jsx)("br",{}),'The output files of the solution will be built in this folder, upon command: "build": "react-scripts build",',(0,r.jsx)("br",{}),"8. VS Set up routing in the project:",(0,r.jsx)("br",{}),"file: Program.cs",(0,r.jsx)("br",{})]}),(0,r.jsxs)("div",{children:[(0,r.jsx)(a.L8,{code:'\napp.UseDefaultFiles();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute( name: "default", pattern: "/");\n});\n\napp.Run();\n                '}),(0,r.jsx)("p",{children:"Add controller:"}),(0,r.jsx)("div",{children:(0,r.jsx)(a.L8,{code:'\n[Route("/")]\npublic class ContentApiController : Controller\n{\n    class TempUserData\n    {\n        public string name_file { get; set; }\n        public string user_name { get; set; }\n    }\n\n\n    [Route("/ContentApi/AvatarUpload")]\n    [HttpPost]\n    [Consumes("multipart/form-data")]\n    public async Task<IActionResult> ContentAvatarUpload()\n    {\n        TempUserData? userData;\n\n        try\n        {\n            var dataF = this.Request.Form["data"];\n            if (dataF.Count == 0) throw new Exception("require user data");\n\n            var userDataJson = dataF[0];\n\n            if (userDataJson == null) throw new Exception("user data empty");\n\n            userData = JsonConvert.DeserializeObject<TempUserData>(userDataJson);\n\n            if (userData == null) throw new Exception("User data json empty");\n\n            var fileF = this.Request.Form["avatar"];\n\n            if (fileF[0] != null)\n            {\n                var avatarPath = Path.Combine("avatars");\n                if (Directory.Exists(avatarPath) == false)\n                {\n                    Directory.CreateDirectory(avatarPath);\n                }\n\n                var name = Path.Combine(avatarPath, userData.name_file);\n                if (System.IO.File.Exists(name))\n                {\n                    System.IO.File.Delete(name);\n                }\n\n                await using var fs = new FileStream(name, FileMode.Create);\n                await using var bw = new BinaryWriter(fs);\n\n                var u = fileF[0]!.IndexOf(",", StringComparison.Ordinal);\n                var ass = fileF[0]?.Substring(u + 1);\n                var dataB = Convert.FromBase64String(ass);\n                bw.Write(dataB);\n            }\n            else\n            {\n                throw new Exception("data file avatar - empty");\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e);\n            throw;\n        }\n\n        return Ok(new { avatar = userData.name_file, text = "simpleText" });\n    }\n                    '})})]}),(0,r.jsx)("p",{children:"React solution, change App file"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{children:(0,r.jsx)(a.MM,{code:s})}),(0,r.jsxs)("p",{children:[" ",(0,r.jsx)("p",{children:"Run debug VS project, start React project."})]})]})}}}]);
//# sourceMappingURL=5986.3f0682fc.chunk.js.map