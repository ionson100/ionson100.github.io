{"version":3,"file":"static/js/7446.a880cbe1.chunk.js","mappings":"wMAKA,MAAMA,EAAI,83CAyDJC,EAAM,g6BAmCZ,MAAMC,UAAmBC,EAAAA,GACrBC,WAAAA,CAAYC,GACRC,MAAMD,GACNE,KAAKC,UAAYC,EAAAA,WACrB,CAOAC,QAAAA,CAASC,GACL,GAAU,MAAPA,EAAW,CAEV,OAAiB,IADNJ,KAAKC,UAAUI,QAAQC,MAC1BC,SACJC,MAAM,sBACNR,KAAKC,UAAUI,QAAQI,SAChB,EAGf,CACA,OAAO,CACX,CAQAC,OAAAA,CAAQN,GAEJ,MAAO,CACHO,KAAKX,KAAKC,UAAUI,QAAQC,MAGpC,CACAM,iBAAAA,GACIZ,KAAKC,UAAUI,QAAQC,MAAMN,KAAKF,MAAMa,KACxCE,YAAW,KACPb,KAAKC,UAAUI,QAAQS,SACvBd,KAAKC,UAAUI,QAAQI,OAAO,GAChC,IACN,CAEAM,MAAAA,GACI,OACIC,EAAAA,EAAAA,KAAA,SAAOC,IAAKjB,KAAKC,UAAWiB,KAAM,OAAQC,MAAO,CAACC,SAAS,KAEnE,EAGW,SAASC,IACpB,MAAMC,GAAYC,EAAAA,EAAAA,UAElB,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,qFACkFV,EAAAA,EAAAA,KAAA,SAAK,qEACrBA,EAAAA,EAAAA,KAAA,SAAK,kEACRA,EAAAA,EAAAA,KAAA,SAAK,yBAC9CA,EAAAA,EAAAA,KAAA,SAAK,gBACdA,EAAAA,EAAAA,KAAA,SAAK,oCACeA,EAAAA,EAAAA,KAAA,SAAK,0GACiEA,EAAAA,EAAAA,KAAA,SAAK,sDACzDA,EAAAA,EAAAA,KAAA,SAAK,uEACYA,EAAAA,EAAAA,KAAA,UACnEQ,EAAAA,EAAAA,MAAA,QAAML,MAAO,CAACQ,WAAW,QAAQD,SAAA,CAAC,wFAAoFV,EAAAA,EAAAA,KAAA,gBAE1HA,EAAAA,EAAAA,KAAA,SAAQY,UAAW,aAAeX,IAAKK,KAEvCN,EAAAA,EAAAA,KAAA,SAAK,KAACA,EAAAA,EAAAA,KAAA,UACNA,EAAAA,EAAAA,KAAA,UAAQa,QAASA,KACbP,EAAUjB,QAAQyB,UAAY,IAC9BC,EAAAA,EAAAA,IAAc,CACVC,OAAO,EACPC,QAASjB,EAAAA,EAAAA,KAAA,QAAMG,MAAO,CAACe,YAAa,IAAIR,SAAC,mBACzCS,MAAMnB,EAAAA,EAAAA,KAACrB,EAAU,CAACgB,KAAM,iBACxByB,UAAU,CAACC,QAAQ,IACnBC,QAAS,EACJtB,EAAAA,EAAAA,KAAA,UAAQ,YAAW,EAAEU,SAAC,QACtBV,EAAAA,EAAAA,KAAA,UAAQ,aAAY,EAAG,aAAY,EAAEU,SAAC,aAE5Ca,MAAKC,IACJlB,EAAUjB,QAAQyB,UAAYW,KAAKC,UAAUF,EAAE,GACjD,EACJd,SAAC,UAEHV,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAU,UACIV,EAAAA,EAAAA,KAAC2B,EAAAA,GAAqB,CAAClD,KAAMA,OAEjCuB,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAU,UACIV,EAAAA,EAAAA,KAAC2B,EAAAA,GAAqB,CAAClD,KAAMC,QAI7C,C","sources":["ViewStorage/menu/dialog/4-10.js"],"sourcesContent":["import React, {useRef} from \"react\";\r\nimport {ShowBsrDialog, BaseBodyDialog} from \"bsr-modaldialog\";\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\n\r\n/*-------------------------------------*/\r\nconst code = `\r\nimport React, {useRef} from \"react\";\r\nimport {ShowBsrDialog,BaseBodyDialog} from \"bsr-modaldialog\";\r\nimport 'bsr-modaldialog/dist/index.css'\r\n\r\nclass BodyDialog extends BaseBodyDialog {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mRefInput = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * Checking the completion of data, making a decision to continue\r\n     * @param mode data-mode attribute value\r\n     * @returns {boolean} true - continue false break\r\n     */\r\n    validate(mode) {\r\n        if(mode===\"1\"){\r\n            const text=this.mRefInput.current.value;\r\n            if(text.length===0){\r\n                alert(\" input value empty\")\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Receiving data from a dialog to pass it outside\r\n     * @param mode data-mode attribute value\r\n     * @returns {object} data body\r\n     */\r\n    getData(mode) {\r\n\r\n        return {\r\n            text:this.mRefInput.current.value\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.mRefInput.current.value=this.props.text\r\n        setTimeout(()=>{\r\n            this.mRefInput.current.select();\r\n            this.mRefInput.current.focus()\r\n        },100)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input ref={this.mRefInput} type={\"text\"} style={{fontSize:20}} />\r\n        )\r\n    }\r\n}\r\n\r\n`\r\nconst code2=`\r\n\r\nexport function P4_10() {\r\n    const mRefLabel = useRef();\r\n\r\n    return (\r\n        <>\r\n            <label ref={mRefLabel}></label>\r\n            <br/>\r\n            \r\n            <button onClick={() => {\r\n                mRefLabel.current.innerText = ''\r\n                \r\n                ShowBsrDialog({\r\n                    modal: true,\r\n                    header: (<span style={{paddingLeft: 10}}>Dialog Prompt</span>),\r\n                    body: <BodyDialog text={'default text'}/>,\r\n                    styleBody:{padding:20},\r\n                    buttons: [\r\n                        (<button data-mode={1}>ok</button>),\r\n                        (<button data-mode={-1}  data-focus={1}>close</button>)\r\n                    ]\r\n                }).then(a => {\r\n                    mRefLabel.current.innerText = JSON.stringify(a)\r\n                })\r\n            }}>show\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\n`\r\n\r\n\r\n/*-------------------------------------*/\r\nclass BodyDialog extends BaseBodyDialog {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mRefInput = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * Checking the completion of data, making a decision to continue\r\n     * @param mode data-mode attribute value\r\n     * @returns {boolean} true - continue false break\r\n     */\r\n    validate(mode) {\r\n        if(mode===\"1\"){\r\n            const text=this.mRefInput.current.value;\r\n            if(text.length===0){\r\n                alert(\" input value empty\")\r\n                this.mRefInput.current.focus()\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Receiving data from a dialog to pass it outside\r\n     * @param mode data-mode attribute value\r\n     * @returns {object} data body\r\n     */\r\n    getData(mode) {\r\n\r\n        return {\r\n            text:this.mRefInput.current.value\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.mRefInput.current.value=this.props.text\r\n        setTimeout(()=>{\r\n            this.mRefInput.current.select();\r\n            this.mRefInput.current.focus()\r\n        },100)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input ref={this.mRefInput} type={\"text\"} style={{fontSize:20}} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default function P4_10() {\r\n    const mRefLabel = useRef();\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                For complex dialogs, in order to gain full control over the contents of the body,<br/>\r\n                the body needs to inherit from the abstract class BaseBodyDialog,<br/>\r\n                where you need to implement the methods: validate and getData <br/>\r\n                and rendering method.<br/>\r\n                Event trace:<br/>\r\n                1. Pressing a button or Esc key.<br/>\r\n                2. Processing in the validate procedure. If the procedure returns a false result, the processing ends.<br/>\r\n                3. Obtaining body content data, procedure getData.<br/>\r\n                4. Formation of a response to the promise and closing the dialogue.<br/>\r\n                <span style={{fontWeight:\"bold\"}}>Attention: in all procedures the mode argument, the value of the data-mode attribute<br/></span>\r\n            </p>\r\n            <label  className={'label-then'}  ref={mRefLabel}></label>\r\n\r\n            <br/> <br/>\r\n            <button onClick={() => {\r\n                mRefLabel.current.innerText = ''\r\n                ShowBsrDialog({\r\n                    modal: true,\r\n                    header: (<span style={{paddingLeft: 10}}>Dialog Prompt </span>),\r\n                    body: <BodyDialog text={'default text'}/>,\r\n                    styleBody:{padding:20},\r\n                    buttons: [\r\n                        (<button data-mode={1}>ok</button>),\r\n                        (<button data-mode={-1} data-focus={1}>close</button>)\r\n                    ]\r\n                }).then(a => {\r\n                    mRefLabel.current.innerText = JSON.stringify(a)\r\n                })\r\n            }}>show\r\n            </button>\r\n            <br/>\r\n            <div>\r\n                <CodeSnippetJavaScript code={code}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n                <CodeSnippetJavaScript code={code2}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["code","code2","BodyDialog","BaseBodyDialog","constructor","props","super","this","mRefInput","React","validate","mode","current","value","length","alert","focus","getData","text","componentDidMount","setTimeout","select","render","_jsx","ref","type","style","fontSize","P4_10","mRefLabel","useRef","_jsxs","_Fragment","children","fontWeight","className","onClick","innerText","ShowBsrDialog","modal","header","paddingLeft","body","styleBody","padding","buttons","then","a","JSON","stringify","CodeSnippetJavaScript"],"sourceRoot":""}