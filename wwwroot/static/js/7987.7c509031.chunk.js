"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[7987],{97987:(e,r,n)=>{n.r(r),n.d(r,{default:()=>i});var t=n(61225),a=(n(65043),n(70579));function i(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("p",{children:[" Orm allows you to work simultaneously with multiple databases.(PostgresSql, MySql, SqLite, MSSql)",(0,a.jsx)("br",{}),"To do this, you need to get the session of the selected database."]}),(0,a.jsxs)("p",{style:{color:"red"},children:["Restrictions.",(0,a.jsx)("br",{}),"Table mapping types should not intersect with each other,",(0,a.jsx)("br",{}),"Each database must have its own table type.",(0,a.jsx)("br",{}),"This is due to a possible collision when constructing SQL queries."]}),(0,a.jsx)("div",{children:(0,a.jsx)(t.L8,{code:'/// <summary>\n///     Getting a session to work with another database\n/// </summary>\n/// <typeparam name="TF">\n///     The type that the interface must implement IOtherDataBaseFactory and\n///     have a default constructor\n/// </typeparam>\n/// <returns></returns>\npublic static ISession GetSession<TF>() where TF : IOtherDataBaseFactory, new()\n{\n  \n} \nvar sessionOther=Configure.GetSession<IOtherDataBaseFactory>()'})}),(0,a.jsx)("br",{}),(0,a.jsx)("p",{children:"Database Interface Implementation IOtherDataBaseFactory Patterns"}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"Postgres"}),(0,a.jsx)("div",{children:(0,a.jsx)(t.L8,{code:' public class MyDbPostgres : IOtherDataBaseFactory\n {\n     private static readonly Lazy<DbProviderFactory> DbProviderFactory =\n         new Lazy<DbProviderFactory>(() => Npgsql.NpgsqlFactory.Instance);\n     public ProviderName GetProviderName()\n     {\n         return ProviderName.PostgreSql;\n     }\n     public string GetConnectionString()\n     {\n         return "connectionString";\n     }\n\n     public DbProviderFactory GetDbProviderFactories()\n     {\n         return DbProviderFactory.Value;\n     }\n }'})})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"MSSql"}),(0,a.jsx)("div",{children:(0,a.jsx)(t.L8,{code:'public class MyDbMsSql : IOtherDataBaseFactory\n{\n    private static readonly Lazy<DbProviderFactory> DbProviderFactory = \n        new Lazy<DbProviderFactory>(() => System.Data.SqlClient.SqlClientFactory.Instance);\n    public ProviderName GetProviderName()\n    {\n        return ProviderName.MsSql;\n    }\n    public string GetConnectionString()\n    {\n        return "connectionString";\n    }\n\n    public DbProviderFactory GetDbProviderFactories()\n    {\n        return DbProviderFactory.Value;\n    }\n}'})})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"SQLite"}),(0,a.jsx)("div",{children:(0,a.jsx)(t.L8,{code:'public class MyDbSqlite : IOtherDataBaseFactory\n{\n    private static readonly Lazy<DbProviderFactory> DbProviderFactory = \n        new Lazy<DbProviderFactory>(() => System.Data.SQLite.SQLiteFactory.Instance);\n    public ProviderName GetProviderName()\n    {\n        return ProviderName.SqLite;\n    }\n    public string GetConnectionString()\n    {\n        return "connectionString";\n    }\n\n    public DbProviderFactory GetDbProviderFactories()\n    {\n        return DbProviderFactory.Value;\n    }\n}'})})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"MySql"}),(0,a.jsx)("div",{children:(0,a.jsx)(t.L8,{code:" public  class MyDbMySql : IOtherDataBaseFactory\n {\n   private static readonly Lazy<DbProviderFactory> DbProviderFactory = \n       new Lazy<DbProviderFactory>(() => new MySqlClientFactory());\n   public ProviderName GetProviderName()\n   {\n       return ProviderName.MySql;\n   }\n   public string GetConnectionString()\n   {\n       return ConnectionStrings.Mysql;\n   }\n\n   public DbProviderFactory GetDbProviderFactories()\n   {\n       return DbProviderFactory.Value;\n   }\n }"})})]})]})}}}]);
//# sourceMappingURL=7987.7c509031.chunk.js.map