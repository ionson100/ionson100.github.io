{"version":3,"file":"static/js/8259.ad7e9a6e.chunk.js","mappings":"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","sources":["ViewStorage/menu/table_extension/EditUser.tsx","ViewStorage/menu/table_extension/19-9.tsx"],"sourcesContent":["import {BaseBodyDialog, ShowBsrDialog} from \"bsr-modaldialog\";\r\nimport 'bsr-modaldialog/dist/index.css'\r\nimport {User} from \"./19-9\";\r\nimport {FaReact} from \"react-icons/fa6\";\r\nimport React from \"react\";\r\n\r\nexport const codeEdit=`import {BaseBodyDialog, ShowBsrDialog} from \"bsr-modaldialog\";\r\nimport 'bsr-modaldialog/dist/index.css'\r\nimport {User} from \"./19-9\";\r\nimport {FaReact} from \"react-icons/fa6\";\r\nimport React from \"react\";\r\n\r\ntype EditUserProps = {\r\n    user: User;\r\n}\r\n\r\nclass EditUserBody extends BaseBodyDialog<EditUserProps> {\r\n\r\n    private refFirstName = React.createRef<HTMLInputElement>()\r\n    private refLastName = React.createRef<HTMLInputElement>()\r\n\r\n    validate(mode: string | undefined): boolean | undefined {\r\n        if (mode === '2') {\r\n            // fetch post to server\r\n            //if ok\r\n            setTimeout(() => {\r\n                this.props.user.firstName = this.refFirstName.current!.value\r\n                this.props.user.lastName = this.refLastName.current!.value\r\n                this.selfClose('200')\r\n            })\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    getData(mode: string | undefined) {\r\n        return undefined\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refFirstName.current?.select()\r\n        this.refFirstName.current!.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{padding: 20}}>\r\n                <div style={{fontSize: 15, color: \"#464545\"}}>first name:</div>\r\n                <input ref={this.refFirstName} type={\"text\"} defaultValue={this.props.user.firstName}/>\r\n                <div style={{fontSize: 15, color: \"#464545\", marginTop: 10}}>last name:</div>\r\n                <input ref={this.refLastName} type={\"text\"} defaultValue={this.props.user.lastName}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function EditUserDialog(user: User) {\r\n    return ShowBsrDialog({\r\n        position: \"top\",\r\n        icon: <FaReact color={\"red\"} size={20}/>,\r\n        header: (<span style={{paddingLeft: 10}}>Edit User </span>),\r\n        body: <EditUserBody user={user}/>,\r\n        buttons: [<button data-mode={2}>Save</button>, <button data-mode={-1}>Cancel</button>]\r\n    })\r\n}`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype EditUserProps = {\r\n    user: User;\r\n}\r\n\r\nclass EditUserBody extends BaseBodyDialog<EditUserProps> {\r\n\r\n    private refFirstName = React.createRef<HTMLInputElement>()\r\n    private refLastName = React.createRef<HTMLInputElement>()\r\n\r\n    validate(mode: string | undefined): boolean | undefined {\r\n        if (mode === '2') {\r\n            // fetch post to server\r\n            //if ok\r\n            setTimeout(() => {\r\n                this.props.user.firstName = this.refFirstName.current!.value\r\n                this.props.user.lastName = this.refLastName.current!.value\r\n                this.selfClose('200')\r\n            })\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    getData(mode: string | undefined) {\r\n        return undefined\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refFirstName.current?.select()\r\n        this.refFirstName.current!.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{padding: 20}}>\r\n                <div style={{fontSize: 15, color: \"#464545\"}}>first name:</div>\r\n                <input ref={this.refFirstName} type={\"text\"} defaultValue={this.props.user.firstName}/>\r\n                <div style={{fontSize: 15, color: \"#464545\", marginTop: 10}}>last name:</div>\r\n                <input ref={this.refLastName} type={\"text\"} defaultValue={this.props.user.lastName}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function EditUserDialog(user: User) {\r\n    return ShowBsrDialog({\r\n        position: \"top\",\r\n        icon: <FaReact color={\"red\"} size={20}/>,\r\n        header: (<span style={{paddingLeft: 10}}>Edit User </span>),\r\n        body: <EditUserBody user={user}/>,\r\n        buttons: [<button data-mode={2}>Save</button>, <button data-mode={-1}>Cancel</button>]\r\n    })\r\n}","import React, {useRef} from \"react\";\r\nimport {Column, DataRow, Table} from \"bsr-table-extension\";\r\nimport 'bsr-table-extension/dist/index.css'\r\nimport {v4 as uuid} from 'uuid'\r\nimport {BiSolidEdit} from \"react-icons/bi\";\r\nimport {codeEdit, EditUserDialog} from \"./EditUser\";\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\n\r\nconst code = `import React, {useRef} from \"react\";\r\nimport {Column, DataRow, Table} from \"bsr-table-extension\";\r\nimport 'bsr-table-extension/dist/index.css'\r\nimport {v4 as uuid} from 'uuid'\r\nimport {BiSolidEdit} from \"react-icons/bi\";\r\nimport {EditUserDialog} from \"./EditUser\";\r\n\r\nexport type User = {\r\n    id: string\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    age: number\r\n}\r\n\r\nexport default function P19_9() {\r\n    const refTable = useRef<Table>(null)\r\n    const list: DataRow<User, any>[] = []\r\n\r\n    function fill(count: number) {\r\n        list.length = 0\r\n        for (let i = 0; i < count; i++) {\r\n            const user: User = {\r\n                id: uuid(),\r\n                age: 5 + i,\r\n                email: \"user\" + i + \"@user.com\",\r\n                firstName: \"User\" + i,\r\n                lastName: \"User LN:\" + i\r\n            }\r\n            list.push({\r\n                id: user.id,\r\n                tag: user,\r\n                style: {padding: 3},\r\n                getView: () => {\r\n                    return {\r\n                        button: <div onClick={() => {\r\n                            EditUserDialog(user).then(r => {\r\n                                if (r.mode === '200') {\r\n                                    refTable.current?.Refresh(() => {\r\n                                        refTable.current?.SelectRowById([user.id])\r\n                                    })\r\n                                }\r\n                            })\r\n                        }}><BiSolidEdit size={25} color={'#036239'}/></div>,\r\n                        age: user.age,\r\n                        email: user.email,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return list\r\n    }\r\n\r\n    return (\r\n        <Table\r\n            useRowSelection\r\n            ref={refTable}\r\n            rowItems={fill(5)}\r\n            style={{width: \"50%\", marginTop: 20}}>\r\n            <Column nameProperty={'button'} style={{width: 30}}></Column>\r\n            <Column nameProperty={'firstName'}>First Name:</Column>\r\n            <Column nameProperty={'lastName'}>Last Name:</Column>\r\n            <Column nameProperty={'age'}>Age:</Column>\r\n            <Column nameProperty={'email'}>Email:</Column>\r\n        </Table>\r\n    )\r\n}`\r\n\r\n\r\nexport type User = {\r\n    id: string\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    age: number\r\n}\r\n\r\nexport default function App() {\r\n    const refTable = useRef<Table>(null)\r\n    const list: DataRow<User, any>[] = []\r\n\r\n    function fill(count: number) {\r\n        list.length = 0\r\n        for (let i = 0; i < count; i++) {\r\n            const user: User = {\r\n                id: uuid(),\r\n                age: 5 + i,\r\n                email: \"user\" + i + \"@user.com\",\r\n                firstName: \"User\" + i,\r\n                lastName: \"User LN:\" + i\r\n            }\r\n            list.push({\r\n                id: user.id,\r\n                tag: user,\r\n                style: {padding: 3},\r\n                getView: () => {\r\n                    return {\r\n                        button: <div onClick={() => {\r\n                            EditUserDialog(user).then(r => {\r\n                                if (r.mode === '200') {\r\n                                    refTable.current?.Refresh(() => {\r\n                                        refTable.current?.SelectRowById([user.id])\r\n                                    })\r\n                                }\r\n                            })\r\n                        }}><BiSolidEdit size={25} color={'#036239'}/></div>,\r\n                        age: user.age,\r\n                        email: user.email,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return list\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Table\r\n                useRowSelection\r\n                ref={refTable}\r\n                rowItems={fill(5)}\r\n                style={{width: \"50%\", marginTop: 20}}>\r\n                <Column nameProperty={'button'} style={{width: 30}}></Column>\r\n                <Column nameProperty={'firstName'}>First Name:</Column>\r\n                <Column nameProperty={'lastName'}>Last Name:</Column>\r\n                <Column nameProperty={'age'}>Age:</Column>\r\n                <Column nameProperty={'email'}>Email:</Column>\r\n            </Table>\r\n            <p>19-1.tsx</p>\r\n            <CodeSnippetJavaScript code={code}/>\r\n            <p>EditUser.tsx</p>\r\n            <CodeSnippetJavaScript code={codeEdit}/>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n"],"names":["codeEdit","EditUserBody","BaseBodyDialog","constructor","arguments","refFirstName","React","refLastName","validate","mode","setTimeout","this","props","user","firstName","current","value","lastName","selfClose","getData","componentDidMount","_this$refFirstName$cu","select","focus","render","_jsxs","style","padding","children","_jsx","fontSize","color","ref","type","defaultValue","marginTop","EditUserDialog","ShowBsrDialog","position","icon","FaReact","size","header","paddingLeft","body","buttons","code","App","refTable","useRef","list","_Fragment","Table","useRowSelection","rowItems","count","length","i","id","uuid","age","email","push","tag","getView","button","onClick","then","r","_refTable$current","Refresh","_refTable$current2","SelectRowById","BiSolidEdit","fill","width","Column","nameProperty","CodeSnippetJavaScript"],"sourceRoot":""}