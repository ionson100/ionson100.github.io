{"version":3,"file":"static/js/5631.d4f64152.chunk.js","mappings":"6LAIe,SAASA,IACpB,OAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBACHC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,k6BAsC3BF,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,6BACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,kiBAW/BF,EAAAA,EAAAA,KAAA,UAEAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,wBACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,kWAS/BF,EAAAA,EAAAA,KAAA,UAEAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,2BACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,mSAa/BF,EAAAA,EAAAA,KAAA,UAEAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,0CACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,svBA0B/BF,EAAAA,EAAAA,KAAA,UAEAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,0BACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,2PAW/BF,EAAAA,EAAAA,KAAA,UAEAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,4BACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,kPAe3C,C","sources":["ViewStorage/menu/orm/6-6.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function P6_6() {\r\n    return (\r\n\r\n        <>\r\n            <p> head part: </p>\r\n            <div>\r\n                <CodeSnippetDotNet code={`using Newtonsoft.Json;\r\nusing ORM_1_21_;\r\n\r\n[MapTable(\"m_t_123\")]\r\nclass MyClass\r\n{\r\n    [MapPrimaryKey(\"id\", Generator.Native)]\r\n    public long Id { get; set; };\r\n\r\n    [MapColumn(\"name\")] public string? Name { get; set; }\r\n\r\n    [MapColumn(\"age\")] [MapIndex] public int Age { get; set; }\r\n\r\n    [MapColumnType(\"text\")]\r\n    [MapColumn(\"des\")]\r\n    public string? Description { get; set; }\r\n\r\n    [MapColumn(\"date\")] public DateTime DateTime { get; set; } = DateTime.UtcNow;\r\n}\r\n\r\n\r\nvoid WriteLineClass(object a)\r\n{\r\n    Console.WriteLine(JsonConvert.SerializeObject(a));\r\n}\r\n\r\nusing var session = Configure.Session;\r\nsession.DropTableIfExists<MyClass>();\r\n\r\nsession.TableCreate<MyClass>();\r\n List<MyClass> classes = new List<MyClass>\r\n {\r\n     new() { Name = \"NAME1\",DateTime  = DateTime.Now,Age = 10},\r\n     new() { Name = \"NAME2\",DateTime  = DateTime.Now,Age = 20}\r\n };\r\nsession.InsertBulk(classes);\r\n                `}/>\r\n            </div>\r\n            <br/>\r\n            <details>\r\n                <summary >FreeSql and sql request</summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`var sql = $\"select * from {session.TableName<MyClass>()}\";\r\n//select * from \"m_t_123\"\r\nvar sql = $\"select {session.StarSql<MyClass>()} from {session.TableName<MyClass>()}\";\r\n//select \"id\", \"name\", \"age\", \"des\", \"date\" from \"m_t_123\"\r\n\r\nvar sql = $\"select {session.StarSql<MyClass>()} from {session.TableName<MyClass>()} where {session.ColumnName<MyClass>(a=>a.Age)} > 20\";\r\n//sql=\"select \\\\\"id\\\\\", \\\\\"name\\\\\", \\\\\"age\\\\\", \\\\\"des\\\\\", \\\\\"date\\\\\" from \\\\\"m_t_123\\\\\" where \\\\\"age\\\\\" > 20\"\r\n\r\nvar res =session.FreeSql<MyClass>(sql).ToList();`}/>\r\n                </div>\r\n            </details>\r\n            <br/>\r\n\r\n            <details>\r\n                <summary >FreeSql as dynamic</summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`var sql = $\"select * from {session.TableName<MyClass>()} \";\r\nvar res =session.FreeSql<dynamic>(sql).ToList();\r\nres.ForEach(WriteLineClass);\r\n\r\nvar sql = $\"SELECT  tt.name AS tt_name, tt1.name AS tt1_name FROM m_t_123 AS tt JOIN m_t_123 AS tt1  ON tt.age=tt1.age\";\r\nvar res =session.FreeSql<dynamic>(sql).ToList();\r\nres.ForEach(WriteLineClass);`}/>\r\n                </div>\r\n            </details>\r\n            <br/>\r\n\r\n            <details>\r\n                <summary >FreeSql as other type</summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`var sql = $\"SELECT  age FROM m_t_123 \";\r\nvar res =session.FreeSql<int>(sql).ToList();\r\nres.ForEach(Console.WriteLine);\r\n\r\nvar sql = $\"SELECT  date FROM m_t_123 \";\r\nvar res =session.FreeSql<DateTime>(sql).ToList();\r\nres.ForEach(a =>\r\n{\r\n    Console.WriteLine(a.ToString(\"D\"));\r\n});`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n\r\n            <details>\r\n                <summary >FreeSql custom type with constructor</summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`//(using attribute:MapReceiverFreeSqlAttribute) the presence of a constructor with parameters\r\n[MapReceiverFreeSql]\r\nclass MyFreeSql\r\n{\r\n    public long IdGuid { get; }\r\n    public string Name { get; }\r\n    public int Age { get; }\r\n    public MyFreeSql(long idGuid, string myName, int myAge)\r\n    {\r\n        IdGuid = idGuid;\r\n        Name = myName;\r\n        Age = myAge;\r\n\r\n    }\r\n}\r\n//Caution!\r\n//Sequence of types from select: select id,name,age,enum \r\n//Must match the sequence of constructor parameter types.: MyFreeSql(long id, string myName, int myAge)\r\n\r\n\r\nvar sql = $\"SELECT id, name as \\\\\"myName\\\\\", age as \\\\\"myAge\\\\\" from {session.TableName<MyClass>()}\";\r\nvar res =session.FreeSql<MyFreeSql>(sql).ToList();\r\nres.ForEach(WriteLineClass);`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n\r\n            <details>\r\n                <summary >FreeSql custom type </summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`class MyFreeSql\r\n{\r\n    public long id { get; set; }\r\n    public string name { get; set; }\r\n\r\nvar sql = $\"SELECT id,name from {session.TableName<MyClass>()}\";\r\nvar res =session.FreeSql<MyFreeSql>(sql).ToList();\r\nres.ForEach(WriteLineClass);`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n\r\n            <details>\r\n                <summary >FreeSql anonymous type</summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`static List<T> TempSql<T>(T t,string sql)\r\n{\r\n    return Configure.Session.FreeSql<T>(sql).ToList();\r\n}\r\n\r\nvar sql = \"SELECT name, age from m_t_123\";\r\nvar res=TempSql(new { name = \"\", age = 0 }, sql);\r\nres.ForEach(WriteLineClass);`}/>\r\n                </div>\r\n            </details>\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n"],"names":["P6_6","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code"],"sourceRoot":""}