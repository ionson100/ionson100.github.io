{"version":3,"file":"static/js/7415.525040fc.chunk.js","mappings":"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","sources":["ViewStorage/menu/orm/6-15.tsx"],"sourcesContent":["import {CodeSnippetDotNet, CodeSnippetJson} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\n\r\nexport default function P6_15(){\r\n    return(\r\n\r\n        <>\r\n            <p> head part: </p>\r\n            <div>\r\n                <CodeSnippetDotNet code={`[MapTable(\"m_geo\")]\r\n[MapTable(\"m_geo\")]\r\nclass MGeo\r\n{\r\n    [MapPrimaryKey(\"id\", Generator.Assigned)]\r\n    public Guid Id { get; set; } = Guid.NewGuid();\r\n\r\n    [MapColumn(\"name\")]\r\n    public string Name { get; set; }\r\n   \r\n    [MapIndex]\r\n    [MapColumn(\"shape\")]\r\n    public IGeoShape Shape { get; set; }\r\n\r\n    //or only Point\r\n    //[MapIndex]\r\n    //[MapColumnType(\"geography(POINT)\")]\r\n    //[MapColumn(\"shape\")]\r\n    //public IGeoShape Shape { get; set; } = FactoryGeo.Point(0, 0);\r\n\r\n}\r\n\r\nusing ORM_1_21_;\r\nusing ORM_1_21_.geo;\r\n\r\nstring? path = null;\r\n#if DEBUG\r\npath = \"SqlLog.txt\";\r\n#endif\r\nvar _ = new Configure(\"Server=localhost;Port=5432;Database=test123;User Id=postgres;Password=postgres;\",\r\n    ProviderName.PostgreSql, path);\r\n\r\nusing var session = Configure.Session;\r\n//session.ExecuteNonQuery(\"CREATE EXTENSION postgis\"); \r\nsession.DropTableIfExists<MGeo>();\r\nsession.TableCreate<MGeo>();\r\n\r\n//ORM: CREATE TABLE IF NOT EXISTS \"m_geo\" (\r\n// \"id\" UUID  PRIMARY KEY,\r\n// \"name\" VARCHAR(256) NULL ,\r\n// \"shape\" geometry NULL );\r\n//CREATE INDEX IF NOT EXISTS  \"idx_m_geo_shape_geom\" ON \"m_geo\" USING gist (\"shape\");\r\n\r\n`}/>\r\n            </div>\r\n            <br/>\r\n            <details>\r\n                <summary >Create geo shape, insert to table</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={`var mGeo = new MGeo{Name = \"LineString\",Shape = FactoryGeo.LineString(new GeoPoint(1,2),new GeoPoint(2,3))};\r\nsession.InsertBulk(new List<MGeo>{mGeo});\r\n//ORM: INSERT INTO \"m_geo\" ( \"id\",\"name\",\"shape\") VALUES('f0c1f8ce-d108-46d8-ac9c-d009fc248bce','LineString',ST_GeomFromText('LINESTRING(1 2, 2 3)', 4326))\r\n\r\nvar mGeo = new MGeo{Name = \"LineString\",Shape = FactoryGeo.LineString(new GeoPoint(1,2),new GeoPoint(2,3))};\r\nsession.Insert(mGeo);\r\n//ORM: INSERT INTO \"m_geo\" (\"id\", \"name\", \"shape\") VALUES (@p1,@p2,ST_GeomFromText(@p3, @srid3)) ;\r\n//params:  @p1='970b0705-f7ee-4ef4-8658-534b360cf805'  @p2='LineString'  @srid3=4326  @p3='LINESTRING(1 2, 2 3)'`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >Srid</summary>\r\n                <div>\r\n                    <p>\r\n                        Default srid:4326<br/>\r\n                        EPSG4326 A common CRS among GIS enthusiasts. Uses simple Equirectangular projection<br/>\r\n                        You can change the default srid:\r\n                    </p>\r\n\r\n                    <CodeSnippetDotNet code={`FactoryGeo.DefaultSrid = 3857`}/>\r\n                    <p>Change the srid for an individual object:</p>\r\n                    <CodeSnippetDotNet code={`var mGeo = new MGeo\r\n{\r\n    Name = \"LineString\",\r\n    Shape = FactoryGeo.LineString(new GeoPoint(1,2),new GeoPoint(2,3)).SetSrid(4326)\r\n};`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >Get type geometry</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={`session.Insert(new MGeo { Name = \"LineString\", Shape = FactoryGeo.LineString(new GeoPoint(1, 2), new GeoPoint(2, 3)) });\r\nsession.Insert(new MGeo { Name = \"Point\", Shape = FactoryGeo.Point(new GeoPoint(1, 2)) });\r\nvar geoList = session.Query<MGeo>().Select(a => a.Shape.StGeometryType()).ToList();\r\ngeoList.ForEach(Console.WriteLine);\r\n//ORM: SELECT ST_GeometryType(\"m_geo\".\"shape\") FROM \"m_geo\";\r\n\r\n// get only Point\r\nvar points = session.Query<MGeo>().Where(a => a.Shape.StGeometryType()==\"ST_Point\").ToList();\r\npoints.ForEach(a=>Console.WriteLine(a.Name));\r\n//SELECT \"m_geo\".\"id\", \"m_geo\".\"name\", coalesce(CONCAT('SRID=',ST_SRID(\"m_geo\".\"shape\"),';',ST_AsText(\"m_geo\".\"shape\")),null) as \"shape\" FROM \"m_geo\"\r\n//WHERE ( ST_GeometryType(\"m_geo\".\"shape\") = @p1); params:  @p1='ST_Point' \r\n\r\n\r\n\r\n`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >StArea</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_Area.html'}>ST_Area</a>\r\n\r\n                    <CodeSnippetDotNet code={`session.Insert(new MGeo { Name = \"polygon1\", Shape = FactoryGeo.Polygon(\"POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\") });\r\n\r\nvar res = session.Query<MGeo>().Select(a=>new {a.Name,s=a.Shape.StArea()}).ToList();\r\nvar res1 = session.Query<MGeo>().Where(a => a.Shape.StArea() > 800).ToList();\r\nvar res2 = session.Query<MGeo>().SelectSqlE(a => $\"Concat({a.Name},': ', ST_Area({a.Shape}))\").ToList();\r\nvar shape = FactoryGeo.Polygon(\r\n    \"POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\");\r\nvar s = shape.SetSession(session).StArea();\r\n//ORM: INSERT INTO \"m_geo\" (\"id\", \"name\", \"shape\") VALUES (@p1,@p2,ST_GeomFromText(@p3, @srid3)) ;\r\n//params:  @p1='26338f5a-e5d8-42a5-a8f5-661ea924ee42'  @p2='polygon1'  @srid3=4326  @p3='POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))' \r\n//ORM: SELECT \"m_geo\".\"name\" , ST_Area(\"m_geo\".\"shape\") FROM \"m_geo\";\r\n//ORM: SELECT \"m_geo\".\"id\", \"m_geo\".\"name\", coalesce(CONCAT('SRID=',ST_SRID(\"m_geo\".\"shape\"),';',ST_AsText(\"m_geo\".\"shape\")),null) as \"shape\" FROM \"m_geo\" WHERE ( ST_Area(\"m_geo\".\"shape\") > 800);\r\n//ORM: SELECT Concat(\"m_geo\".\"name\",': ', ST_Area(\"m_geo\".\"shape\")) FROM \"m_geo\";\r\n//ORM:  select ST_Area(ST_GeomFromText(@1, @2)) params:  @1='POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))'  @2=4326 \r\n`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >StAsBinary</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_AsBinary.html'}>ST_AsBinary</a>\r\n                    <CodeSnippetDotNet code={`session.Insert(new MGeo { Name = \"polygon1\", Shape = FactoryGeo.Polygon(\"POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\") });\r\nvar res = session.Query<MGeo>().Select(a=>new {a.Name,s=a.Shape.StAsBinary()}).ToList();\r\nvar shape = FactoryGeo.Polygon(\r\n    \"POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\");\r\nvar s = shape.SetSession(session).StAsBinary();\r\n//ORM: SELECT \"m_geo\".\"name\" , ST_AsBinary(\"m_geo\".\"shape\") FROM \"m_geo\";\r\n//ORM: select ST_AsBinary(ST_GeomFromText(@1, @2))\r\n//params:  @1 = 'POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))'  @2 = 4326`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >StAsText</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_AsText.html'}>StAsText</a>\r\n                    <CodeSnippetDotNet code={`session.Insert(new MGeo { Name = \"polygon1\", Shape = FactoryGeo.Polygon(\"POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\") });\r\nvar res = session.Query<MGeo>().Select(a=>new {a.Name,s=a.Shape.StAsText()}).ToList();\r\nvar shape = FactoryGeo.Polygon(\r\n    \"POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\");\r\nvar s = shape.StAsText();\r\n//ORM: SELECT \"m_geo\".\"name\" , ST_AsText(\"m_geo\".\"shape\") FROM \"m_geo\";`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >StWithin</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_Within.html'}>ST_Within</a>\r\n                    <p>Find all objects in the database that are contained in a container</p>\r\n                    <CodeSnippetDotNet code={`session.Insert(new MGeo { Name = \"point1\", Shape = FactoryGeo.Point(-122.12824857332558, 47.6395516675712) });\r\nsession.Insert(new MGeo { Name = \"point2\", Shape = FactoryGeo.Point(0, 0) });\r\nvar container = FactoryGeo.Polygon(new[]\r\n{\r\n    -122.13236581015025,\r\n    47.64606476313813,\r\n\r\n    -122.13221982500913,\r\n    47.633757091363975,\r\n\r\n    -122.11840598103835,\r\n    47.641749416109235,\r\n\r\n    -122.12061400629656,\r\n    47.64589264786028,\r\n\r\n    -122.13236581015025,\r\n    47.64606476313813\r\n});\r\nvar listGeo = session.Query<MGeo>().Where(a => a.Shape.StWithin(container) == true).ToList();`}/>\r\n\r\n                    <p>Find out if a point can be inside a container</p>\r\n                    <CodeSnippetDotNet code={`var point = FactoryGeo.Point(-122.12824857332558, 47.6395516675712);\r\nvar container = FactoryGeo.Polygon(new[]\r\n{\r\n    -122.13236581015025,\r\n    47.64606476313813,\r\n\r\n    -122.13221982500913,\r\n    47.633757091363975,\r\n\r\n    -122.11840598103835,\r\n    47.641749416109235,\r\n\r\n    -122.12061400629656,\r\n    47.64589264786028,\r\n\r\n    -122.13236581015025,\r\n    47.64606476313813\r\n});\r\nvar isWithin = point.SetSession(session).StWithin(container) ;`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >STContains</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_Contains.html'}>ST_Contains</a>\r\n                    <CodeSnippetDotNet code={`var p= FactoryGeo.Polygon(\"polygon ((0 0, 0 10, 10 10, 10 0, 0 0))\");\r\nvar p1 =  FactoryGeo.Polygon(\"polygon ((-1 -1, -1 11, 11 11, 11 -1, -1 -1))\") ;\r\nvar p2 = FactoryGeo.Polygon(\"polygon ((-2 -2, -2 11, 12 12, 12 -2, -2 -2))\");\r\nsession.Insert(new MGeo { Name = \"container1\", Shape = p1 });\r\nsession.Insert(new MGeo { Name = \"container2\", Shape = p2 });\r\n\r\nvar res = session.Query<MGeo>().Where(a => a.Shape.StContains(p) == true).ToList();\r\nvar isContains = p1.SetSession(session).StContains(p) ;`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >StCrosses</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_Crosses.html'}>ST_Crosses</a>\r\n                    <CodeSnippetDotNet code={`var p= FactoryGeo.LineString(\"linestring (20 20, 60 60)\");\r\nvar p1 =  FactoryGeo.LineString(\"linestring (40 50, 50 40)\") ;\r\nsession.Insert(new MGeo { Name = \"line\", Shape = p });\r\n\r\nvar res = session.Query<MGeo>().Where(a => a.Shape.StCrosses(p1) == true).ToList();\r\nvar isCrosses = p.SetSession(session).StCrosses(p1) ;`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >StOverlaps</summary>\r\n                <div>\r\n                    <a rel=\"noreferrer\" target={\"_blank\"} href={'https://postgis.net/docs/ST_Overlaps.html'}>ST_Overlaps</a>\r\n                    <CodeSnippetDotNet code={`var p= FactoryGeo.Polygon(\"POLYGON ((40 170, 90 30, 180 100, 40 170))\");\r\nvar p1 =  FactoryGeo.Polygon(\"POLYGON ((110 180, 20 60, 130 90, 110 180))\") ;\r\nsession.Insert(new MGeo { Name = \"polygon\", Shape = p });\r\n\r\n\r\nvar res = session.Query<MGeo>().Where(a => a.Shape.StOverlaps(p1) == true).ToList();\r\nvar isOverlap = p.SetSession(session).StOverlaps(p1) ;`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary style={{cursor:\"pointer\"}}>GetGeoJson</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={`var geo1 = FactoryGeo.CreateGeo(\"POINT(1 2)\").SetSrid(4326);\r\nvar gei2 = FactoryGeo.CreateGeo(\"POINT(-2 3)\").SetSrid(4326);\r\nvar gei3 = FactoryGeo.CreateGeo(\"POLYGON((0 0, 0 5, 20 5, 10 0,0 0))\").SetSrid(4326);\r\nvar col = FactoryGeo.GeometryCollection(geo1, gei2, gei3);\r\nvar jObject = col.GetGeoJson(new { id = Guid.NewGuid(), name = \"gc1\" });\r\nstring json = JsonConvert.SerializeObject(jObject, Formatting.Indented);\r\n\r\n`}/>\r\n                    <CodeSnippetJson code={`{\r\n  \"type\": \"GeometryCollection\",\r\n  \"geometries\": [\r\n    {\r\n      \"type\": \"Point\",\r\n      \"coordinates\": [\r\n        1.0,\r\n        2.0\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"Point\",\r\n      \"coordinates\": [\r\n        -2.0,\r\n        3.0\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"Polygon\",\r\n      \"coordinates\": [\r\n        [\r\n          [\r\n            0.0,\r\n            0.0\r\n          ],\r\n          [\r\n            0.0,\r\n            5.0\r\n          ],\r\n          [\r\n            20.0,\r\n            5.0\r\n          ],\r\n          [\r\n            10.0,\r\n            0.0\r\n          ],\r\n          [\r\n            0.0,\r\n            0.0\r\n          ]\r\n        ]\r\n      ]\r\n    }\r\n  ],\r\n  \"properties\": {\r\n    \"id\": \"8e1be472-2609-4ef9-9933-942d4c4fbabc\",\r\n    \"name\": \"collection\"\r\n  }\r\n}`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary style={{cursor:\"pointer\"}}>FactoryGeo.GetFeatureCollection</summary>\r\n                <div>\r\n\r\n                    <CodeSnippetDotNet code={`var geo1 = FactoryGeo.CreateGeo(\"POINT(1 2)\").SetSrid(4326);\r\nvar geo2 = FactoryGeo.CreateGeo(\"POINT(-2 3)\").SetSrid(4326);\r\nvar geo3 = FactoryGeo.CreateGeo(\"POLYGON((0 0, 0 5, 20 5, 10 0,0 0))\").SetSrid(4326);\r\n\r\nvar feature1 = geo1.GetGeoJson(new { name = \"geo1\", id = Guid.NewGuid() });\r\nvar feature2 = geo2.GetGeoJson(new { name = \"geo2\", id = Guid.NewGuid() });\r\nvar feature3 = geo3.GetGeoJson(new { name = \"geo2\", id = Guid.NewGuid() });\r\nvar coll = FactoryGeo.GetFeatureCollection(new List<object> { feature1, feature2, feature3 });\r\nvar json = JsonConvert.SerializeObject(coll, Formatting.Indented);`}/>\r\n                    <CodeSnippetJson code={`{\r\n  \"type\": \"FeatureCollection\",\r\n  \"features\": [\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n          1.0,\r\n          2.0\r\n        ]\r\n      },\r\n      \"properties\": {\r\n        \"name\": \"geo1\",\r\n        \"id\": \"96a83842-8a3d-4703-a478-c4b00807ba84\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n          -2.0,\r\n          3.0\r\n        ]\r\n      },\r\n      \"properties\": {\r\n        \"name\": \"geo2\",\r\n        \"id\": \"99cce012-05c5-4817-80d8-cc5f75785519\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\r\n        \"type\": \"Polygon\",\r\n        \"coordinates\": [\r\n          [\r\n            [\r\n              0.0,\r\n              0.0\r\n            ],\r\n            [\r\n              0.0,\r\n              5.0\r\n            ],\r\n            [\r\n              20.0,\r\n              5.0\r\n            ],\r\n            [\r\n              10.0,\r\n              0.0\r\n            ],\r\n            [\r\n              0.0,\r\n              0.0\r\n            ]\r\n          ]\r\n        ]\r\n      },\r\n      \"properties\": {\r\n        \"name\": \"geo2\",\r\n        \"id\": \"238d0884-fe1b-4ab9-9f29-66b3fc1cdff8\"\r\n      }\r\n    }\r\n  ]\r\n}`}/>\r\n                </div>\r\n            </details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n\r\n\r\n\r\n    )\r\n}"],"names":["P6_15","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code","rel","target","href","style","cursor","CodeSnippetJson"],"sourceRoot":""}