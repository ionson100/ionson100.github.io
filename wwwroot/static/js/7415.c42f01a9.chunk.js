"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[7415],{67415:(e,n,s)=>{s.r(n),s.d(n,{default:()=>t});var o=s(61225),a=(s(65043),s(70579));function t(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:" head part: "}),(0,a.jsx)("div",{children:(0,a.jsx)(o.L8,{code:'[MapTable("m_geo")]\n[MapTable("m_geo")]\nclass MGeo\n{\n    [MapPrimaryKey("id", Generator.Assigned)]\n    public Guid Id { get; set; } = Guid.NewGuid();\n\n    [MapColumn("name")]\n    public string Name { get; set; }\n   \n    [MapIndex]\n    [MapColumn("shape")]\n    public IGeoShape Shape { get; set; }\n\n    //or only Point\n    //[MapIndex]\n    //[MapColumnType("geography(POINT)")]\n    //[MapColumn("shape")]\n    //public IGeoShape Shape { get; set; } = FactoryGeo.Point(0, 0);\n\n}\n\nusing ORM_1_21_;\nusing ORM_1_21_.geo;\n\nstring? path = null;\n#if DEBUG\npath = "SqlLog.txt";\n#endif\nvar _ = new Configure("Server=localhost;Port=5432;Database=test123;User Id=postgres;Password=postgres;",\n    ProviderName.PostgreSql, path);\n\nusing var session = Configure.Session;\n//session.ExecuteNonQuery("CREATE EXTENSION postgis"); \nsession.DropTableIfExists<MGeo>();\nsession.TableCreate<MGeo>();\n\n//ORM: CREATE TABLE IF NOT EXISTS "m_geo" (\n// "id" UUID  PRIMARY KEY,\n// "name" VARCHAR(256) NULL ,\n// "shape" geometry NULL );\n//CREATE INDEX IF NOT EXISTS  "idx_m_geo_shape_geom" ON "m_geo" USING gist ("shape");\n\n'})}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"Create geo shape, insert to table"}),(0,a.jsx)("div",{children:(0,a.jsx)(o.L8,{code:'var mGeo = new MGeo{Name = "LineString",Shape = FactoryGeo.LineString(new GeoPoint(1,2),new GeoPoint(2,3))};\nsession.InsertBulk(new List<MGeo>{mGeo});\n//ORM: INSERT INTO "m_geo" ( "id","name","shape") VALUES(\'f0c1f8ce-d108-46d8-ac9c-d009fc248bce\',\'LineString\',ST_GeomFromText(\'LINESTRING(1 2, 2 3)\', 4326))\n\nvar mGeo = new MGeo{Name = "LineString",Shape = FactoryGeo.LineString(new GeoPoint(1,2),new GeoPoint(2,3))};\nsession.Insert(mGeo);\n//ORM: INSERT INTO "m_geo" ("id", "name", "shape") VALUES (@p1,@p2,ST_GeomFromText(@p3, @srid3)) ;\n//params:  @p1=\'970b0705-f7ee-4ef4-8658-534b360cf805\'  @p2=\'LineString\'  @srid3=4326  @p3=\'LINESTRING(1 2, 2 3)\''})})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"Srid"}),(0,a.jsxs)("div",{children:[(0,a.jsxs)("p",{children:["Default srid:4326",(0,a.jsx)("br",{}),"EPSG4326 A common CRS among GIS enthusiasts. Uses simple Equirectangular projection",(0,a.jsx)("br",{}),"You can change the default srid:"]}),(0,a.jsx)(o.L8,{code:"FactoryGeo.DefaultSrid = 3857"}),(0,a.jsx)("p",{children:"Change the srid for an individual object:"}),(0,a.jsx)(o.L8,{code:'var mGeo = new MGeo\n{\n    Name = "LineString",\n    Shape = FactoryGeo.LineString(new GeoPoint(1,2),new GeoPoint(2,3)).SetSrid(4326)\n};'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"Get type geometry"}),(0,a.jsx)("div",{children:(0,a.jsx)(o.L8,{code:'session.Insert(new MGeo { Name = "LineString", Shape = FactoryGeo.LineString(new GeoPoint(1, 2), new GeoPoint(2, 3)) });\nsession.Insert(new MGeo { Name = "Point", Shape = FactoryGeo.Point(new GeoPoint(1, 2)) });\nvar geoList = session.Query<MGeo>().Select(a => a.Shape.StGeometryType()).ToList();\ngeoList.ForEach(Console.WriteLine);\n//ORM: SELECT ST_GeometryType("m_geo"."shape") FROM "m_geo";\n\n// get only Point\nvar points = session.Query<MGeo>().Where(a => a.Shape.StGeometryType()=="ST_Point").ToList();\npoints.ForEach(a=>Console.WriteLine(a.Name));\n//SELECT "m_geo"."id", "m_geo"."name", coalesce(CONCAT(\'SRID=\',ST_SRID("m_geo"."shape"),\';\',ST_AsText("m_geo"."shape")),null) as "shape" FROM "m_geo"\n//WHERE ( ST_GeometryType("m_geo"."shape") = @p1); params:  @p1=\'ST_Point\' \n\n\n\n'})})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"StArea"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_Area.html",children:"ST_Area"}),(0,a.jsx)(o.L8,{code:'session.Insert(new MGeo { Name = "polygon1", Shape = FactoryGeo.Polygon("POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))") });\n\nvar res = session.Query<MGeo>().Select(a=>new {a.Name,s=a.Shape.StArea()}).ToList();\nvar res1 = session.Query<MGeo>().Where(a => a.Shape.StArea() > 800).ToList();\nvar res2 = session.Query<MGeo>().SelectSqlE(a => $"Concat({a.Name},\': \', ST_Area({a.Shape}))").ToList();\nvar shape = FactoryGeo.Polygon(\n    "POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))");\nvar s = shape.SetSession(session).StArea();\n//ORM: INSERT INTO "m_geo" ("id", "name", "shape") VALUES (@p1,@p2,ST_GeomFromText(@p3, @srid3)) ;\n//params:  @p1=\'26338f5a-e5d8-42a5-a8f5-661ea924ee42\'  @p2=\'polygon1\'  @srid3=4326  @p3=\'POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\' \n//ORM: SELECT "m_geo"."name" , ST_Area("m_geo"."shape") FROM "m_geo";\n//ORM: SELECT "m_geo"."id", "m_geo"."name", coalesce(CONCAT(\'SRID=\',ST_SRID("m_geo"."shape"),\';\',ST_AsText("m_geo"."shape")),null) as "shape" FROM "m_geo" WHERE ( ST_Area("m_geo"."shape") > 800);\n//ORM: SELECT Concat("m_geo"."name",\': \', ST_Area("m_geo"."shape")) FROM "m_geo";\n//ORM:  select ST_Area(ST_GeomFromText(@1, @2)) params:  @1=\'POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\'  @2=4326 \n'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"StAsBinary"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_AsBinary.html",children:"ST_AsBinary"}),(0,a.jsx)(o.L8,{code:'session.Insert(new MGeo { Name = "polygon1", Shape = FactoryGeo.Polygon("POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))") });\nvar res = session.Query<MGeo>().Select(a=>new {a.Name,s=a.Shape.StAsBinary()}).ToList();\nvar shape = FactoryGeo.Polygon(\n    "POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))");\nvar s = shape.SetSession(session).StAsBinary();\n//ORM: SELECT "m_geo"."name" , ST_AsBinary("m_geo"."shape") FROM "m_geo";\n//ORM: select ST_AsBinary(ST_GeomFromText(@1, @2))\n//params:  @1 = \'POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))\'  @2 = 4326'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"StAsText"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_AsText.html",children:"StAsText"}),(0,a.jsx)(o.L8,{code:'session.Insert(new MGeo { Name = "polygon1", Shape = FactoryGeo.Polygon("POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))") });\nvar res = session.Query<MGeo>().Select(a=>new {a.Name,s=a.Shape.StAsText()}).ToList();\nvar shape = FactoryGeo.Polygon(\n    "POLYGON((743238 2967416,743238 2967450, 743265 2967450,743265.625 2967416,743238 2967416))");\nvar s = shape.StAsText();\n//ORM: SELECT "m_geo"."name" , ST_AsText("m_geo"."shape") FROM "m_geo";'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"StWithin"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_Within.html",children:"ST_Within"}),(0,a.jsx)("p",{children:"Find all objects in the database that are contained in a container"}),(0,a.jsx)(o.L8,{code:'session.Insert(new MGeo { Name = "point1", Shape = FactoryGeo.Point(-122.12824857332558, 47.6395516675712) });\nsession.Insert(new MGeo { Name = "point2", Shape = FactoryGeo.Point(0, 0) });\nvar container = FactoryGeo.Polygon(new[]\n{\n    -122.13236581015025,\n    47.64606476313813,\n\n    -122.13221982500913,\n    47.633757091363975,\n\n    -122.11840598103835,\n    47.641749416109235,\n\n    -122.12061400629656,\n    47.64589264786028,\n\n    -122.13236581015025,\n    47.64606476313813\n});\nvar listGeo = session.Query<MGeo>().Where(a => a.Shape.StWithin(container) == true).ToList();'}),(0,a.jsx)("p",{children:"Find out if a point can be inside a container"}),(0,a.jsx)(o.L8,{code:"var point = FactoryGeo.Point(-122.12824857332558, 47.6395516675712);\nvar container = FactoryGeo.Polygon(new[]\n{\n    -122.13236581015025,\n    47.64606476313813,\n\n    -122.13221982500913,\n    47.633757091363975,\n\n    -122.11840598103835,\n    47.641749416109235,\n\n    -122.12061400629656,\n    47.64589264786028,\n\n    -122.13236581015025,\n    47.64606476313813\n});\nvar isWithin = point.SetSession(session).StWithin(container) ;"})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"STContains"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_Contains.html",children:"ST_Contains"}),(0,a.jsx)(o.L8,{code:'var p= FactoryGeo.Polygon("polygon ((0 0, 0 10, 10 10, 10 0, 0 0))");\nvar p1 =  FactoryGeo.Polygon("polygon ((-1 -1, -1 11, 11 11, 11 -1, -1 -1))") ;\nvar p2 = FactoryGeo.Polygon("polygon ((-2 -2, -2 11, 12 12, 12 -2, -2 -2))");\nsession.Insert(new MGeo { Name = "container1", Shape = p1 });\nsession.Insert(new MGeo { Name = "container2", Shape = p2 });\n\nvar res = session.Query<MGeo>().Where(a => a.Shape.StContains(p) == true).ToList();\nvar isContains = p1.SetSession(session).StContains(p) ;'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"StCrosses"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_Crosses.html",children:"ST_Crosses"}),(0,a.jsx)(o.L8,{code:'var p= FactoryGeo.LineString("linestring (20 20, 60 60)");\nvar p1 =  FactoryGeo.LineString("linestring (40 50, 50 40)") ;\nsession.Insert(new MGeo { Name = "line", Shape = p });\n\nvar res = session.Query<MGeo>().Where(a => a.Shape.StCrosses(p1) == true).ToList();\nvar isCrosses = p.SetSession(session).StCrosses(p1) ;'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{children:"StOverlaps"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{target:"_blank",href:"https://postgis.net/docs/ST_Overlaps.html",children:"ST_Overlaps"}),(0,a.jsx)(o.L8,{code:'var p= FactoryGeo.Polygon("POLYGON ((40 170, 90 30, 180 100, 40 170))");\nvar p1 =  FactoryGeo.Polygon("POLYGON ((110 180, 20 60, 130 90, 110 180))") ;\nsession.Insert(new MGeo { Name = "polygon", Shape = p });\n\n\nvar res = session.Query<MGeo>().Where(a => a.Shape.StOverlaps(p1) == true).ToList();\nvar isOverlap = p.SetSession(session).StOverlaps(p1) ;'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{style:{cursor:"pointer"},children:"GetGeoJson"}),(0,a.jsxs)("div",{children:[(0,a.jsx)(o.L8,{code:'var geo1 = FactoryGeo.CreateGeo("POINT(1 2)").SetSrid(4326);\nvar gei2 = FactoryGeo.CreateGeo("POINT(-2 3)").SetSrid(4326);\nvar gei3 = FactoryGeo.CreateGeo("POLYGON((0 0, 0 5, 20 5, 10 0,0 0))").SetSrid(4326);\nvar col = FactoryGeo.GeometryCollection(geo1, gei2, gei3);\nvar jObject = col.GetGeoJson(new { id = Guid.NewGuid(), name = "gc1" });\nstring json = JsonConvert.SerializeObject(jObject, Formatting.Indented);\n\n'}),(0,a.jsx)(o.TC,{code:'{\n  "type": "GeometryCollection",\n  "geometries": [\n    {\n      "type": "Point",\n      "coordinates": [\n        1.0,\n        2.0\n      ]\n    },\n    {\n      "type": "Point",\n      "coordinates": [\n        -2.0,\n        3.0\n      ]\n    },\n    {\n      "type": "Polygon",\n      "coordinates": [\n        [\n          [\n            0.0,\n            0.0\n          ],\n          [\n            0.0,\n            5.0\n          ],\n          [\n            20.0,\n            5.0\n          ],\n          [\n            10.0,\n            0.0\n          ],\n          [\n            0.0,\n            0.0\n          ]\n        ]\n      ]\n    }\n  ],\n  "properties": {\n    "id": "8e1be472-2609-4ef9-9933-942d4c4fbabc",\n    "name": "collection"\n  }\n}'})]})]}),(0,a.jsx)("br",{}),(0,a.jsxs)("details",{children:[(0,a.jsx)("summary",{style:{cursor:"pointer"},children:"FactoryGeo.GetFeatureCollection"}),(0,a.jsxs)("div",{children:[(0,a.jsx)(o.L8,{code:'var geo1 = FactoryGeo.CreateGeo("POINT(1 2)").SetSrid(4326);\nvar geo2 = FactoryGeo.CreateGeo("POINT(-2 3)").SetSrid(4326);\nvar geo3 = FactoryGeo.CreateGeo("POLYGON((0 0, 0 5, 20 5, 10 0,0 0))").SetSrid(4326);\n\nvar feature1 = geo1.GetGeoJson(new { name = "geo1", id = Guid.NewGuid() });\nvar feature2 = geo2.GetGeoJson(new { name = "geo2", id = Guid.NewGuid() });\nvar feature3 = geo3.GetGeoJson(new { name = "geo2", id = Guid.NewGuid() });\nvar coll = FactoryGeo.GetFeatureCollection(new List<object> { feature1, feature2, feature3 });\nvar json = JsonConvert.SerializeObject(coll, Formatting.Indented);'}),(0,a.jsx)(o.TC,{code:'{\n  "type": "FeatureCollection",\n  "features": [\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1.0,\n          2.0\n        ]\n      },\n      "properties": {\n        "name": "geo1",\n        "id": "96a83842-8a3d-4703-a478-c4b00807ba84"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          -2.0,\n          3.0\n        ]\n      },\n      "properties": {\n        "name": "geo2",\n        "id": "99cce012-05c5-4817-80d8-cc5f75785519"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Polygon",\n        "coordinates": [\n          [\n            [\n              0.0,\n              0.0\n            ],\n            [\n              0.0,\n              5.0\n            ],\n            [\n              20.0,\n              5.0\n            ],\n            [\n              10.0,\n              0.0\n            ],\n            [\n              0.0,\n              0.0\n            ]\n          ]\n        ]\n      },\n      "properties": {\n        "name": "geo2",\n        "id": "238d0884-fe1b-4ab9-9f29-66b3fc1cdff8"\n      }\n    }\n  ]\n}'})]})]})]})}}}]);
//# sourceMappingURL=7415.c42f01a9.chunk.js.map