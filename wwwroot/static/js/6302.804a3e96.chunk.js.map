{"version":3,"file":"static/js/6302.804a3e96.chunk.js","mappings":"mNAKA,MAAMA,EAAK,+uEAsGLC,EAA8B,GAEpC,SAASC,EAAKC,GACVF,EAAKG,OAAS,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC5B,MAAMC,EAAa,CACfC,IAAK,EAAIF,EACTG,MAAO,OAASH,EAAI,YACpBI,UAAW,OAASJ,EACpBK,SAAU,WAAaL,GAE3BJ,EAAKU,KAAK,CACNC,IAAKN,EACLO,QAASA,IACEP,GAGnB,CACA,OAAOL,CACX,CAEe,SAASa,IAEpB,MAAMC,GAAWC,EAAAA,EAAAA,QAAc,MAC/B,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,KAAO,IAADC,EACnBpB,EAAK,GACW,QAAhBoB,EAAAP,EAASQ,eAAO,IAAAD,GAAhBA,EAAkBE,SAAS,EAC7BL,SAAC,WAGHC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,KAAO,IAADI,EACnBvB,EAAK,GACW,QAAhBuB,EAAAV,EAASQ,eAAO,IAAAE,GAAhBA,EAAkBD,SAAS,EAC7BL,SAAC,WAGHC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,KAAO,IAADK,EACnBxB,EAAK,IACW,QAAhBwB,EAAAX,EAASQ,eAAO,IAAAG,GAAhBA,EAAkBF,SAAS,EAC7BL,SAAC,YAGHC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,KACbN,EAASQ,QAASI,OAAS,GAAG,EAChCR,SAAC,eAGHC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,KACbN,EAASQ,QAASI,YAASC,CAAS,EAEtCT,SAAC,kBAGHF,EAAAA,EAAAA,MAACY,EAAAA,GAAK,CAACC,IAAKf,EAAUgB,SAAU9B,EAAM+B,MAAO,CAACC,MAAO,MAAOC,UAAW,IAAIf,SAAA,EACvEC,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,aAAc,YAAYjB,SAAC,gBACnCC,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,aAAc,WAAWjB,SAAC,eAClCC,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,aAAc,MAAOJ,MAAO,CAACC,MAAO,QAAQd,SAAC,SACrDC,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,aAAc,QAAQjB,SAAC,WAC/BF,EAAAA,EAAAA,MAACoB,EAAAA,GAAS,CAAAlB,SAAA,EACNC,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAACC,QAAS,EAAEpB,SAAC,YACxBC,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAAAnB,SAAEA,IACFlB,EAAKG,gBAIxBgB,EAAAA,EAAAA,KAACoB,EAAAA,GAAqB,CAACxC,KAAMA,MAGzC,C","sources":["ViewStorage/menu/table_extension/19-7.tsx"],"sourcesContent":["import React, {useRef} from \"react\";\r\nimport {CellFooter, Column, DataRow, RowFooter, Table} from \"bsr-table-extension\";\r\nimport 'bsr-table-extension/dist/index.css'\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\n\r\nconst code=`import React, {useRef} from \"react\";\r\nimport {CellFooter, Column, DataRow, RowFooter, Table} from \"bsr-table-extension\";\r\nimport 'bsr-table-extension/dist/index.css'\r\n\r\ntype User = {\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    age: number\r\n}\r\nconst list: DataRow<User, User>[] = []\r\n\r\nfunction fill(count: number) {\r\n    list.length = 0\r\n    for (let i = 0; i < count; i++) {\r\n        const user: User = {\r\n            age: 5 + i,\r\n            email: \"user\" + i + \"@user.com\",\r\n            firstName: \"User\" + i,\r\n            lastName: \"User LN:\" + i\r\n        }\r\n        list.push({\r\n            tag: user,\r\n            getView: () => {\r\n                return user\r\n            }\r\n        })\r\n    }\r\n    return list\r\n}\r\n\r\nexport default function App() {\r\n\r\n    const refTable = useRef<Table>(null)\r\n    return (\r\n        <>\r\n            <button onClick={() => {\r\n                fill(0);\r\n                refTable.current?.Refresh()\r\n            }}>0 row\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                fill(5);\r\n                refTable.current?.Refresh()\r\n            }}>5 row\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                fill(30);\r\n                refTable.current?.Refresh()\r\n            }}>30 row\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                refTable.current!.height = 400\r\n            }}>scrolling\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                refTable.current!.height = undefined\r\n\r\n            }}>no scrolling\r\n            </button>\r\n\r\n            <Table ref={refTable} rowItems={list} style={{width: \"50%\", marginTop: 20}}>\r\n                <Column nameProperty={'firstName'}>First Name</Column>\r\n                <Column nameProperty={'lastName'}>Last Name</Column>\r\n                <Column nameProperty={'age'} style={{width: \"50px\"}}>Age</Column>\r\n                <Column nameProperty={'email'}>Email</Column>\r\n                <RowFooter>\r\n                    <CellFooter colspan={3}>total:</CellFooter>\r\n                    <CellFooter>{() => {\r\n                        return list.length\r\n                    }}</CellFooter>\r\n                </RowFooter>\r\n            </Table>\r\n        </>\r\n    )\r\n}`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype User = {\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    age: number\r\n}\r\nconst list: DataRow<User, User>[] = []\r\n\r\nfunction fill(count: number) {\r\n    list.length = 0\r\n    for (let i = 0; i < count; i++) {\r\n        const user: User = {\r\n            age: 5 + i,\r\n            email: \"user\" + i + \"@user.com\",\r\n            firstName: \"User\" + i,\r\n            lastName: \"User LN:\" + i\r\n        }\r\n        list.push({\r\n            tag: user,\r\n            getView: () => {\r\n                return user\r\n            }\r\n        })\r\n    }\r\n    return list\r\n}\r\n\r\nexport default function P19_7() {\r\n\r\n    const refTable = useRef<Table>(null)\r\n    return (\r\n        <>\r\n            <button onClick={() => {\r\n                fill(0);\r\n                refTable.current?.Refresh()\r\n            }}>0 row\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                fill(5);\r\n                refTable.current?.Refresh()\r\n            }}>5 row\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                fill(30);\r\n                refTable.current?.Refresh()\r\n            }}>30 row\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                refTable.current!.height = 400\r\n            }}>scrolling\r\n            </button>\r\n\r\n            <button onClick={() => {\r\n                refTable.current!.height = undefined\r\n\r\n            }}>no scrolling\r\n            </button>\r\n\r\n            <Table ref={refTable} rowItems={list} style={{width: \"50%\", marginTop: 20}}>\r\n                <Column nameProperty={'firstName'}>First Name</Column>\r\n                <Column nameProperty={'lastName'}>Last Name</Column>\r\n                <Column nameProperty={'age'} style={{width: \"50px\"}}>Age</Column>\r\n                <Column nameProperty={'email'}>Email</Column>\r\n                <RowFooter>\r\n                    <CellFooter colspan={3}>total:</CellFooter>\r\n                    <CellFooter>{() => {\r\n                        return list.length\r\n                    }}</CellFooter>\r\n                </RowFooter>\r\n            </Table>\r\n            <CodeSnippetJavaScript code={code}/>\r\n        </>\r\n    )\r\n}"],"names":["code","list","fill","count","length","i","user","age","email","firstName","lastName","push","tag","getView","P19_7","refTable","useRef","_jsxs","_Fragment","children","_jsx","onClick","_refTable$current","current","Refresh","_refTable$current2","_refTable$current3","height","undefined","Table","ref","rowItems","style","width","marginTop","Column","nameProperty","RowFooter","CellFooter","colspan","CodeSnippetJavaScript"],"sourceRoot":""}