{"version":3,"file":"static/js/757.8f38a76b.chunk.js","mappings":"kLAEe,SAASA,IACpB,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,yjBA+BzBF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,45DA6EzBF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mBACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,w4CA4EzBF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,iuLAsNrC,C","sources":["ViewStorage/menu/osm/20-7.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\n\r\nexport default function P20_7(){\r\n    return(\r\n        <>\r\n            <p> Props BsrMap:</p>\r\n            <CodeSnippetDotNet code={`type PropsBsrMap = {\r\n    /**\r\n     * options map\r\n     */\r\n    option?: OptionOSM | undefined\r\n\r\n    /**\r\n     * GeoJson as string\r\n     */\r\n    featuresAsJson?: string | undefined\r\n\r\n    /**\r\n     * Array features\r\n     */\r\n    features?: Feature<Geometry>[] | undefined\r\n\r\n    /**\r\n     * diw attribute id, used to form the name of the cookie\r\n     */\r\n    id?: string | undefined\r\n\r\n    /**\r\n     *diw style.\r\n     */\r\n    style?: React.CSSProperties | undefined,\r\n\r\n    /**\r\n     * Class name attribute diw map\r\n     */\r\n    className?: string | undefined\r\n}`}/>\r\n            <p> OptionOSM:</p>\r\n            <CodeSnippetDotNet code={`OptionOSM = {\r\n    /**\r\n     * Map zoom\r\n     */\r\n    zoom?: number;\r\n    /**\r\n     * map center:[latitude,longitude] ([x,y])\r\n     */\r\n    center?: Array<number>\r\n\r\n    /**\r\n     * Rotation map\r\n     */\r\n    rotation?:number\r\n\r\n    /**\r\n     * Disable double click on the map\r\n     */\r\n    removeDoubleClickZoom?: boolean\r\n\r\n    /**\r\n     * Map click event\r\n     */\r\n    onClick?: (map:BsrMap,feature: Feature | undefined,evt: MapBrowserEvent<any>) => void\r\n\r\n    /**\r\n     * Context menu call events\r\n     */\r\n    onShowContextMenu?:(map:BsrMap,feature: Feature<Geometry> | undefined,e: MouseEvent)=>void\r\n\r\n    /**\r\n     * Feature Edit End Events\r\n     */\r\n    onModifyEnd?:(map:BsrMap,feature: Feature<Geometry>)=>void\r\n\r\n    /**\r\n     * Events for finishing the creation of new Feature\r\n     */\r\n    onDrawEnd?:(map:BsrMap,feature:Feature)=>void\r\n\r\n    /**\r\n     * Feature drag end events on the map, (Ctrl+Shift -> mouse drag feature)\r\n     */\r\n    onDragEnd?:(map:BsrMap, feature:Feature)=>void\r\n\r\n    /**\r\n     * Events of the end of selection of a rectangular area on the map, used if useDrawBox = true\r\n     * (Ctrl -> Drawing an area with a mouse)\r\n     * @param features Feature that fell into the selected area\r\n     */\r\n    onDrawBoxEnd?:(map:BsrMap, features:Feature<Geometry>[],extend:Array<number>)=>void\r\n\r\n    /**\r\n     * Allows you to draw a rectangular area on the map. (Ctrl -> Drawing an area with a mouse)\r\n     */\r\n    useDrawBox?:boolean\r\n\r\n    /**\r\n     * Features styles.\r\n     */\r\n    style?:StyleSettings\r\n\r\n    /**\r\n     * Allows inserting map parameters into URL hash, the last data is written into cookies (cookies name 'bsr-12'+ id\r\n     */\r\n    useSynchronizationUrl?:boolean\r\n\r\n    /**\r\n     * URL source for loading geo json when starting the map\r\n     */\r\n    sourceUrl?:string\r\n\r\n    /**\r\n     * map projection. default:'EPSG:4326'\r\n     */\r\n    projection?: 'EPSG:4326'|'EPSG:3857'|string|undefined,\r\n}`}/>\r\n            <p>StyleSettings</p>\r\n            <CodeSnippetDotNet code={`type StyleSettings ={\r\n    /**\r\n     * Line color LineString. default: '#179a1c'\r\n     */\r\n    colorLineString?:string\r\n\r\n    /**\r\n     * Line width. default:4\r\n     */\r\n    widthLineString?:number\r\n\r\n    /**\r\n     * Polygon border color. default:'#07720d'\r\n     */\r\n    colorPolygon?:string\r\n\r\n    /**\r\n     * Polygon border width. default:3\r\n     */\r\n    widthPolygon?:number;\r\n\r\n    /**\r\n     * Polygon fill color. default:'#F8F9F4'\r\n     */\r\n    fillPolygon?:string\r\n\r\n    /**\r\n     * select Line color LineString and Circle. default:'#f80622'\r\n     */\r\n    colorLineSelect?:string\r\n\r\n    /**\r\n     * Select Line width LineString and Circle. default:3\r\n     */\r\n    widthLineSelect?:number\r\n\r\n    /**\r\n     * Polygon, Circle fill color. default:'#F8F9F4'\r\n     */\r\n    fillBodySelect?:string\r\n\r\n    /**\r\n     * Select Point color. default:'#b91818'\r\n     */\r\n    colorPointSelect?:string\r\n\r\n    /**\r\n     * Select Radius Point: default:6\r\n     */\r\n    radiusPointSelect?:number\r\n\r\n    /**\r\n     * Circle color. default:'#24f22e'\r\n     */\r\n    colorCircle?:string\r\n    \r\n    /**\r\n     * Circle fill color. default:'#dd2e2e'\r\n     */\r\n    fillCircle?:string\r\n\r\n    /**\r\n     * Circle border width. default:5\r\n     */\r\n    widthCircle?:number\r\n    \r\n    /**\r\n     * Point color. default:'#0324fb'\r\n     */\r\n    colorPoint?:string\r\n\r\n    /**\r\n     * Point radius. default:5\r\n     */\r\n    radiusPoint?:number\r\n}`}/>\r\n            <p>Instance functions</p>\r\n            <CodeSnippetDotNet code={`class BsrMap extends React.Component<PropsBsrMap, any> {\r\n\r\n    /**\r\n     * Disposal of a map object\r\n     * @param callback callback function\r\n     */\r\n    Dispose(callback?: () => void) {}\r\n\r\n    /**\r\n     * Getting a div that contains a card\r\n     */\r\n    public GetDivMap(): HTMLDivElement {}\r\n\r\n\r\n    /**\r\n     * Getting the current map projection\r\n     */\r\n    public GetCurrentEPSGProjection(): string {}\r\n\r\n    /**\r\n     * Canceling a geometry creation operation\r\n     * @param callback callback function\r\n     */\r\n    public CancelCreate(callback?: () => void):void {}\r\n\r\n    /**\r\n     * Rotate the map\r\n     * @param rotation rotation magnitude\r\n     */\r\n    public Rotation(rotation: number):void {}\r\n\r\n    /**\r\n     * Getting ol.VectorLayer\r\n     */\r\n    public GetVectorLayer(): VectorLayer {}\r\n\r\n    /**\r\n     * Getting ol.VectorSource\r\n     */\r\n    public GetVectorSource(): VectorSource {}\r\n\r\n    /**\r\n     * Getting ol.Map\r\n     */\r\n    public GetMap(): Map {}\r\n\r\n    /**\r\n     * Redrawing Feature Styles\r\n     */\r\n    public RefreshStyleFeatures():void {}\r\n\r\n    /**\r\n     * Overloading option styles is usually required if you have changed styles programmatically.\r\n     */\r\n    public RefreshStyleSettings():void {}\r\n\r\n    /**\r\n     * Redrawing feature styles into selected styles\r\n     * @param feature target Feature\r\n     */\r\n    public SelectFeature(feature: Feature):void {}\r\n\r\n\r\n    /**\r\n     * Redrawing features styles into selected styles\r\n     * @param features target Features\r\n     */\r\n    public SelectFeatures(features: Feature[]):void\r\n\r\n    /**\r\n     * Redrawing a card to a new position\r\n     * @param center center map\r\n     * @param zoom zoom map\r\n     * @param rotation rotation map\r\n     */\r\n    public GoTo(center: number[], zoom?: number, rotation?: number):void {}\r\n\r\n\r\n    /**\r\n     * Getting the current map display coordinates\r\n     */\r\n    public GetMapCoordinate(): { center?: number[], zoom?: number, rotation: number } {}\r\n\r\n    /**\r\n     * Getting the coordinates of a square, displaying a map in a browser, can be obtained as an object or as a json string\r\n     * @param isJson request as json\r\n     */\r\n    public GetBound(isJson?: boolean):{ p1?: number[], p2?: number[], p3?: number[], p4?: number[], p5?: number[] }|string {}\r\n\r\n    /**\r\n     * Getting features from a map, you can select the geometry type, when selecting undefined all features are selected\r\n     * @param geometry  'Point' | 'LineString' | 'Polygon' | 'Circle' | undefined\r\n     */\r\n    public GetFeatures(geometry: 'Point' | 'LineString' | 'Polygon' | 'Circle' | undefined):Feature[]|undefined {}\r\n\r\n    /**\r\n     * Adding Features to a Map\r\n     */\r\n    public AddFeatures(f: Feature[]):void {}\r\n\r\n    /**\r\n     * Adding Feature to a Map\r\n     * @param data Feature or GeoJson as string\r\n     */\r\n    public AddFeature(data: Feature | string):void {}\r\n\r\n    /**\r\n     * Removing Feature from a Map\r\n     * @param f Feature to be removed\r\n     */\r\n    public DeleteFeature(f: Feature):void {}\r\n\r\n    /**\r\n     * Deleting all features from the map\r\n     * @param callback callback function\r\n     */\r\n    public DeleteAllFeatures(callback?: () => void):void {}\r\n\r\n    /**\r\n     * Getting the center of feature\r\n     */\r\n    public GetCenterFeature(feature: Feature): Array<number> {}\r\n\r\n    /**\r\n     * Getting Feature Coordinates\r\n     */\r\n    public GetCoordinateFeature(feature: Feature):Array<any> {}\r\n\r\n    /**\r\n     * Getting  Feature flat Coordinates\r\n     */\r\n    public GetFlatCoordinateFeature(feature: Feature):number[] {}\r\n\r\n    /**\r\n     * Getting options from props\r\n     */\r\n    public GetOptions():OptionOSM {}\r\n\r\n    /**\r\n     * remove last point when creating a feature\r\n     */\r\n    public Undo():void {}\r\n\r\n    /**\r\n     * Build, create feature\r\n     * @param geometry 'Polygon' | 'LineString' | 'Point' | 'Circle'\r\n     * @return Promise<{barMap:BsrMap,isCancel:boolean,feature:Feature|undefined,geometry:string}>\r\n     */\r\n    public CreateFeature(geometry: 'Polygon' | 'LineString' | 'Point' | 'Circle'): Promise<{bsrMap: BsrMap, isCancel: boolean, feature?: Feature}>  {}\r\n\r\n    /**\r\n     * start edit feature\r\n     * @param feature Feature<Geometry>\r\n     * @param callback callback function\r\n     */\r\n    public StartEditFeature(feature: Feature<Geometry>, callback?: () => void):void {}\r\n\r\n\r\n    /**\r\n     * Get the map state, whether the map is in geometry editing state\r\n     */\r\n    public get IsEdit():boolean {}\r\n\r\n    /**\r\n     * Get the state of the map, whether the map is in the state of creating geometry\r\n     */\r\n    public get IsCreate():boolean {}\r\n\r\n    /**\r\n     * Subscribe to feature edit events, returns a key that can be used to unsubscribe\r\n     */\r\n    public AddEvenStateEditingFeature(fun: (stateStart: boolean, f?: Feature<Geometry>) => void):string {}\r\n\r\n    /**\r\n     * Unsubscribing to Feature Editing Events\r\n     * @param key event key\r\n     */\r\n    public RemoveEvenStateEditingFeature(key: string):void {}\r\n\r\n    /**\r\n     * Subscribe to feature creation events, returns a key that can be used to unsubscribe\r\n     */\r\n    public AddEventStateCreatingFeature(fun: (stateStart: boolean, f?: Feature<Geometry>) => void):string {}\r\n\r\n    /**\r\n     * Unsubscribing to geometry creation events\r\n     * @param key event key\r\n     */\r\n    public RemoveEventStateCreatingFeature(key: string):void {}\r\n\r\n    /**\r\n     * end of editing feature\r\n     */\r\n    public EndEditFeature(callback?: () => void):void {}\r\n\r\n    /**\r\n     * Transforming Feature into  geo json\r\n     */\r\n    public FeatureToJson(f: Feature):string {}\r\n\r\n    /**\r\n     * Transforming Feature into  geo json collection\r\n     */\r\n    public FeaturesToJson(features: Feature<Geometry>[]):string {}\r\n\r\n    /**\r\n     * Redrawing feature styles\r\n     */\r\n    public RefreshStyleFeature(feature: Feature) {}\r\n\r\n}`}/>\r\n        </>\r\n\r\n    )\r\n}"],"names":["P20_7","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code"],"sourceRoot":""}