"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[6302],{26302:(n,e,t)=>{t.r(e),t.d(e,{default:()=>c});var r=t(65043),l=t(53180),o=(t(93221),t(61225)),s=t(70579);const i='import React, {useRef} from "react";\nimport {CellFooter, Column, DataRow, RowFooter, Table} from "bsr-table-extension";\nimport \'bsr-table-extension/dist/index.css\'\n\ntype User = {\n    firstName: string\n    lastName: string\n    email: string\n    age: number\n}\nconst list: DataRow<User, User>[] = []\n\nfunction fill(count: number) {\n    list.length = 0\n    for (let i = 0; i < count; i++) {\n        const user: User = {\n            age: 5 + i,\n            email: "user" + i + "@user.com",\n            firstName: "User" + i,\n            lastName: "User LN:" + i\n        }\n        list.push({\n            tag: user,\n            getView: () => {\n                return user\n            }\n        })\n    }\n    return list\n}\n\nexport default function App() {\n\n    const refTable = useRef<Table>(null)\n    return (\n        <>\n            <button onClick={() => {\n                fill(0);\n                refTable.current?.Refresh()\n            }}>0 row\n            </button>\n\n            <button onClick={() => {\n                fill(5);\n                refTable.current?.Refresh()\n            }}>5 row\n            </button>\n\n            <button onClick={() => {\n                fill(30);\n                refTable.current?.Refresh()\n            }}>30 row\n            </button>\n\n            <button onClick={() => {\n                refTable.current!.height = 400\n            }}>scrolling\n            </button>\n\n            <button onClick={() => {\n                refTable.current!.height = undefined\n\n            }}>no scrolling\n            </button>\n\n            <Table ref={refTable} rowItems={list} style={{width: "50%", marginTop: 20}}>\n                <Column nameProperty={\'firstName\'}>First Name</Column>\n                <Column nameProperty={\'lastName\'}>Last Name</Column>\n                <Column nameProperty={\'age\'} style={{width: "50px"}}>Age</Column>\n                <Column nameProperty={\'email\'}>Email</Column>\n                <RowFooter>\n                    <CellFooter colspan={3}>total:</CellFooter>\n                    <CellFooter>{() => {\n                        return list.length\n                    }}</CellFooter>\n                </RowFooter>\n            </Table>\n        </>\n    )\n}',a=[];function u(n){a.length=0;for(let e=0;e<n;e++){const n={age:5+e,email:"user"+e+"@user.com",firstName:"User"+e,lastName:"User LN:"+e};a.push({tag:n,getView:()=>n})}return a}function c(){const n=(0,r.useRef)(null);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("button",{onClick:()=>{var e;u(0),null===(e=n.current)||void 0===e||e.Refresh()},children:"0 row"}),(0,s.jsx)("button",{onClick:()=>{var e;u(5),null===(e=n.current)||void 0===e||e.Refresh()},children:"5 row"}),(0,s.jsx)("button",{onClick:()=>{var e;u(30),null===(e=n.current)||void 0===e||e.Refresh()},children:"30 row"}),(0,s.jsx)("button",{onClick:()=>{n.current.height=400},children:"scrolling"}),(0,s.jsx)("button",{onClick:()=>{n.current.height=void 0},children:"no scrolling"}),(0,s.jsxs)(l.XI,{ref:n,rowItems:a,style:{width:"50%",marginTop:20},children:[(0,s.jsx)(l.VP,{nameProperty:"firstName",children:"First Name"}),(0,s.jsx)(l.VP,{nameProperty:"lastName",children:"Last Name"}),(0,s.jsx)(l.VP,{nameProperty:"age",style:{width:"50px"},children:"Age"}),(0,s.jsx)(l.VP,{nameProperty:"email",children:"Email"}),(0,s.jsxs)(l._Y,{children:[(0,s.jsx)(l._J,{colspan:3,children:"total:"}),(0,s.jsx)(l._J,{children:()=>a.length})]})]}),(0,s.jsx)(o.MM,{code:i})]})}}}]);
//# sourceMappingURL=6302.7da793a7.chunk.js.map