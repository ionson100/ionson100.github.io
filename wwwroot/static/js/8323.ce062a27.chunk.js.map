{"version":3,"file":"static/js/8323.ce062a27.chunk.js","mappings":"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","sources":["ViewStorage/menu/table_extension/19-6.tsx","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["import {v4 as uuid} from 'uuid'\r\nimport {Table, Column, ColumnGroup, HeaderGroup, DataRow, RowFooter, CellFooter} from 'bsr-table-extension'\r\nimport 'bsr-table-extension/dist/index.css'\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\n\r\nconst code = `import {v4 as uuid} from 'uuid'\r\nimport {Table, Column, ColumnGroup, HeaderGroup, DataRow, RowFooter, CellFooter} from 'bsr-table-extension'\r\nimport 'bsr-table-extension/dist/index.css'\r\n\r\ntype User = {\r\n        firstName: string\r\n        lastName: string\r\n        email: string\r\n        age: number\r\n        id: string\r\n    }\r\n\r\n    function fill(count: number) {\r\n        const list: DataRow<User, any>[] = []\r\n        for (let i = 0; i < count; i++) {\r\n            const user: User = {\r\n                id: uuid(),\r\n                age: 5 + i,\r\n                email: \"user\" + i + \"@user.com\",\r\n                firstName: \"User\" + i,\r\n                lastName: \"User LN:\" + i\r\n            }\r\n            const d: DataRow = {\r\n                id: user.id,\r\n                style: {backgroundColor: \"green\"},\r\n                title: user.firstName,\r\n                onClick: (u, e) => {\r\n                    console.log(u.tag)\r\n                },\r\n                className: '\"myClass',\r\n                tag: user,\r\n                getView: () => {\r\n                    return {\r\n                        firstName: <div style={{fontSize: 20}}>{user.firstName}</div>,\r\n                        lastName: <div style={{fontSize: 20, color: \"red\"}}>{user.firstName}</div>,\r\n                        age: user.age,\r\n                        email: \"no date\"\r\n                    }\r\n                }\r\n            }\r\n            list.push(d)\r\n        }\r\n        return list\r\n    }\r\n    \r\nexport function App() {\r\n    return(\r\n     <Table caption={\"see log\"} rowItems={fill(5)} style={{width: \"50%\"}} useRowSelection>\r\n        <Column nameProperty={'firstName'}>First Name:</Column>\r\n        <Column nameProperty={'lastName'}>Last Name:</Column>\r\n        <Column style={{width: 50}} nameProperty={'age'}>Age:</Column>\r\n        <Column nameProperty={'email'}>Email:</Column>\r\n      </Table>   \r\n    )\r\n}\r\n\r\n`\r\n\r\nexport default function P19_6() {\r\n\r\n    type User = {\r\n        firstName: string\r\n        lastName: string\r\n        email: string\r\n        age: number\r\n        id: string\r\n    }\r\n\r\n    function fill(count: number) {\r\n        const list: DataRow<User, any>[] = []\r\n        for (let i = 0; i < count; i++) {\r\n            const user: User = {\r\n                id: uuid(),\r\n                age: 5 + i,\r\n                email: \"user\" + i + \"@user.com\",\r\n                firstName: \"User\" + i,\r\n                lastName: \"User LN:\" + i\r\n            }\r\n            const d: DataRow = {\r\n                id: user.id,\r\n                style: {backgroundColor: \"yellow\"},\r\n                title: user.firstName,\r\n                onClick: (u, e) => {\r\n                    console.log(u.tag)\r\n                },\r\n                className: '\"myClass',\r\n                tag: user,\r\n                getView: () => {\r\n                    return {\r\n                        firstName: <div style={{fontSize: 20}}>{user.firstName}</div>,\r\n                        lastName: <div style={{fontSize: 20, color: \"red\"}}>{user.firstName}</div>,\r\n                        age: user.age,\r\n                        email: \"no date\"\r\n                    }\r\n                }\r\n            }\r\n            list.push(d)\r\n        }\r\n        return list\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{marginTop: 20}}>\r\n                <br/>\r\n                <CodeSnippetJavaScript code={`\r\n            class DataRow<T =any,V =any>{\r\n            public title?:string;\r\n            public style?: React.CSSProperties | undefined\r\n            public className?: string;\r\n            public onClick?:(dataRow:DataRow,target: EventTarget)=>void\r\n            public id?:string\r\n            public tag?:T\r\n            public getView?:()=>V`\r\n                }/>\r\n                <br/>\r\n                <p>Прекция</p>\r\n                <CodeSnippetJavaScript code={`\r\n             const d: DataRow = {\r\n                id: user.id,\r\n                style: {backgroundColor: \"yellow\"},\r\n                title: user.firstName,\r\n                onClick: (u, e) => {\r\n                    console.log(u.tag)\r\n                },\r\n                className: 'myClass',\r\n                tag: user,\r\n                getView: () => {\r\n                    return {\r\n                        firstName:<div style={{fontSize:20}}>{user.firstName}</div>,\r\n                        lastName:<div style={{fontSize:20,color:\"red\"}}>{user.firstName}</div>,\r\n                        age:user.age,\r\n                        email:\"no date\"\r\n                    }\r\n                }\r\n                \r\n                <tr id=\"d55b357f-2e2e-46c9-beb0-70ef187c2b62\" class=\"myClass\" title=\"User0\" data-row-index=\"0\"  style=\"background-color: green;\">\r\n                  <td data-property-name=\"firstName\"><div style=\"font-size: 20px;\">User0</div></td>\r\n                  <td data-property-name=\"lastName\"><div style=\"font-size: 20px; color: red;\">User0</div></td>\r\n                  <td data-property-name=\"age\" style=\"width: 50px;\">5</td>\r\n                  <td data-property-name=\"email\">no date</td>\r\n                </tr>\r\n                `}/>\r\n\r\n\r\n            </div>\r\n            <Table caption={\"see log\"} rowItems={fill(5)} style={{width: \"50%\"}} useRowSelection>\r\n                <Column nameProperty={'firstName'}>First Name:</Column>\r\n                <Column nameProperty={'lastName'}>Last Name:</Column>\r\n                <Column style={{width: 50}} nameProperty={'age'}>Age:</Column>\r\n                <Column nameProperty={'email'}>Email:</Column>\r\n            </Table>\r\n            <CodeSnippetJavaScript code={code}/>\r\n        </>\r\n\r\n    )\r\n}","var randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  var uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;"],"names":["code","P19_6","_jsxs","_Fragment","children","style","marginTop","_jsx","CodeSnippetJavaScript","Table","caption","rowItems","count","list","i","user","id","uuid","age","email","firstName","lastName","d","backgroundColor","title","onClick","u","e","console","log","tag","className","getView","fontSize","color","push","fill","width","useRowSelection","Column","nameProperty","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","toString","slice","unsafeStringify","arr","offset","arguments","length","undefined","toLowerCase","options","buf","native","rnds","random"],"sourceRoot":""}