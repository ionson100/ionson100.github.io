"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[6454],{86454:(e,s,n)=>{n.r(s),n.d(s,{default:()=>r});var a=n(61225),t=(n(65043),n(70579));function r(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("p",{children:" standard: "}),(0,t.jsx)("div",{children:(0,t.jsx)(a.L8,{code:'\nusing var session = Configure.Session;\nvar mClass = new MyClass { Name = "Name1" };\n\nvar res=session.Insert(mClass);\nConsole.WriteLine($"insert: {res}");\n//ORM: INSERT INTO "m_t_123" ("name") VALUES (@p1)  RETURNING "Id"; params:  @p1=\'Name1\' \n\nmClass = session.Query<MyClass>().First();\nmClass.Name = "Name2";\nres = session.Update(mClass);\nConsole.WriteLine($"update: {res}");\n//ORM: UPDATE "m_t_123" SET  "name" = @p1 WHERE "Id" = @p2 ; params:  @p1=\'Name2\'  @p2=1 \n\nres = session.Delete(mClass);\nConsole.WriteLine($"delete: {res}");\n//ORM: DELETE FROM "m_t_123" WHERE "m_t_123"."Id" = @p1 params:  @p1=1 \n                '})}),(0,t.jsx)("br",{}),(0,t.jsxs)("p",{children:[" Use Save:",(0,t.jsx)("br",{}),"Sometimes in the process of work we cannot determine what we need to do to insert or update.",(0,t.jsx)("br",{}),"In this case, we can use the Save method,",(0,t.jsx)("br",{}),"the program itself will decide what to do with the object: update or insert.",(0,t.jsx)("br",{}),"To do this, the object type must be marked with the MapUsagePersistentAttribute attribute.",(0,t.jsx)("br",{}),"Please note that using this attribute lengthens the time required to fetch large data arrays from the database!"]}),(0,t.jsx)("div",{children:(0,t.jsx)(a.L8,{code:'\n[MapUsagePersistent]//!!\n[MapTable("m_t_123")]\nclass MyClass\n{\n     [MapPrimaryKey( Generator.Native)]\n     public long Id { get; set; } \n\n     [MapColumn("name")]\n     public string? Name { get; set; }\n}\nusing var session = Configure.Session;\nvar mClass = session.Query<MyClass>().First();\nmClass.Name = "Name2";\n//... \n//...\n//there is a lot of code where we can forget where \n//this object comes from: from the database or new\n//... \n\nvar res = session.Save(mClass);\nConsole.WriteLine($"save: {res}");\n\n\n//When using the MapUsagePersistentAttribute attribute, \n//you can already determine where the object came from\n\nif (session.IsPersistent(mClass))\n{\n    session.Update(mClass);// from database\n}\nelse\n{\n    session.Insert(mClass);// as new\n}\n\n//We can also mark the new object as if we got it from the database\nmClass = new MyClass();\nsession.ToPersistent(mClass);\n\n\n \n                '})}),(0,t.jsx)("p",{children:" Link to Sql: "}),(0,t.jsx)("div",{children:(0,t.jsx)(a.L8,{code:'\nusing var session = Configure.Session;\nvar res=session.Query<MyClass>().Delete(a => a.Id == 1);\nConsole.WriteLine($"delete by id: {res}");\n//ORM: DELETE FROM "m_t_123" WHERE ("m_t_123"."Id" = 1);\n\n\nusing var session = Configure.Session;\n var res=session.Query<MyClass>().Where(a=>a.Id==1).Update(s=>new Dictionary<object, object>\n {\n     {s.Name,"new Name"},\n     ...,\n     ...,\n });\nConsole.WriteLine($"update  by id : {res}");\n//ORM: UPDATE  "m_t_123" SET  "name" = @p1    WHERE  ("Id" = 1) ; params:  @p1=\'new Name\' \n\n// as raw sql UpdateSql\nusing var session = Configure.Session;\n\nvar res = session.Query<MyClass>().Where(d=>d.Id==1)\n    .UpdateSql(a => $"{a.Name}=@1 , {a.DateTime} = @2", \n        new SqlParam("@1", "test name"),new SqlParam("@2",DateTime.Now));\nConsole.WriteLine($"update  : {res}");\n//UPDATE  "m_t_123" SET  "name"=@1 , "date" = @2    WHERE  ("Id" = 1) ;\n//params:  @1=\'test name\'  @2=6/26/2024 11:56:17 AM  \n                '})})]})}}}]);
//# sourceMappingURL=6454.3b56ab70.chunk.js.map