"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[8259],{58259:(e,t,n)=>{n.r(t),n.d(t,{default:()=>h});var r=n(65043),s=n(53180),i=(n(93221),n(92073)),a=n(49804),o=n(35616),l=(n(14464),n(23156)),u=n(70579);const d='import {BaseBodyDialog, ShowBsrDialog} from "bsr-modaldialog";\nimport \'bsr-modaldialog/dist/index.css\'\nimport {User} from "./19-9";\nimport {FaReact} from "react-icons/fa6";\nimport React from "react";\n\ntype EditUserProps = {\n    user: User;\n}\n\nclass EditUserBody extends BaseBodyDialog<EditUserProps> {\n\n    private refFirstName = React.createRef<HTMLInputElement>()\n    private refLastName = React.createRef<HTMLInputElement>()\n\n    validate(mode: string | undefined): boolean | undefined {\n        if (mode === \'2\') {\n            // fetch post to server\n            //if ok\n            setTimeout(() => {\n                this.props.user.firstName = this.refFirstName.current!.value\n                this.props.user.lastName = this.refLastName.current!.value\n                this.selfClose(\'200\')\n            })\n            return false\n        }\n        return true\n    }\n\n    getData(mode: string | undefined) {\n        return undefined\n    }\n\n    componentDidMount() {\n        this.refFirstName.current?.select()\n        this.refFirstName.current!.focus();\n    }\n\n    render() {\n        return (\n            <div style={{padding: 20}}>\n                <div style={{fontSize: 15, color: "#464545"}}>first name:</div>\n                <input ref={this.refFirstName} type={"text"} defaultValue={this.props.user.firstName}/>\n                <div style={{fontSize: 15, color: "#464545", marginTop: 10}}>last name:</div>\n                <input ref={this.refLastName} type={"text"} defaultValue={this.props.user.lastName}/>\n\n            </div>\n        );\n    }\n}\n\nexport function EditUserDialog(user: User) {\n    return ShowBsrDialog({\n        position: "top",\n        icon: <FaReact color={"red"} size={20}/>,\n        header: (<span style={{paddingLeft: 10}}>Edit User </span>),\n        body: <EditUserBody user={user}/>,\n        buttons: [<button data-mode={2}>Save</button>, <button data-mode={-1}>Cancel</button>]\n    })\n}';class m extends o.qk{constructor(){super(...arguments),this.refFirstName=r.createRef(),this.refLastName=r.createRef()}validate(e){return"2"!==e||(setTimeout((()=>{this.props.user.firstName=this.refFirstName.current.value,this.props.user.lastName=this.refLastName.current.value,this.selfClose("200")})),!1)}getData(e){}componentDidMount(){var e;null===(e=this.refFirstName.current)||void 0===e||e.select(),this.refFirstName.current.focus()}render(){return(0,u.jsxs)("div",{style:{padding:20},children:[(0,u.jsx)("div",{style:{fontSize:15,color:"#464545"},children:"first name:"}),(0,u.jsx)("input",{ref:this.refFirstName,type:"text",defaultValue:this.props.user.firstName}),(0,u.jsx)("div",{style:{fontSize:15,color:"#464545",marginTop:10},children:"last name:"}),(0,u.jsx)("input",{ref:this.refLastName,type:"text",defaultValue:this.props.user.lastName})]})}}function c(e){return(0,o.fG)({position:"top",icon:(0,u.jsx)(l.rMV,{color:"red",size:20}),header:(0,u.jsx)("span",{style:{paddingLeft:10},children:"Edit User "}),body:(0,u.jsx)(m,{user:e}),buttons:[(0,u.jsx)("button",{"data-mode":2,children:"Save"}),(0,u.jsx)("button",{"data-mode":-1,children:"Cancel"})]})}var f=n(61225);const p="import React, {useRef} from \"react\";\nimport {Column, DataRow, Table} from \"bsr-table-extension\";\nimport 'bsr-table-extension/dist/index.css'\nimport {v4 as uuid} from 'uuid'\nimport {BiSolidEdit} from \"react-icons/bi\";\nimport {EditUserDialog} from \"./EditUser\";\n\nexport type User = {\n    id: string\n    firstName: string\n    lastName: string\n    email: string\n    age: number\n}\n\nexport default function P19_9() {\n    const refTable = useRef<Table>(null)\n    const list: DataRow<User, any>[] = []\n\n    function fill(count: number) {\n        list.length = 0\n        for (let i = 0; i < count; i++) {\n            const user: User = {\n                id: uuid(),\n                age: 5 + i,\n                email: \"user\" + i + \"@user.com\",\n                firstName: \"User\" + i,\n                lastName: \"User LN:\" + i\n            }\n            list.push({\n                id: user.id,\n                tag: user,\n                style: {padding: 3},\n                getView: () => {\n                    return {\n                        button: <div onClick={() => {\n                            EditUserDialog(user).then(r => {\n                                if (r.mode === '200') {\n                                    refTable.current?.Refresh(() => {\n                                        refTable.current?.SelectRowById([user.id])\n                                    })\n                                }\n                            })\n                        }}><BiSolidEdit size={25} color={'#036239'}/></div>,\n                        age: user.age,\n                        email: user.email,\n                        firstName: user.firstName,\n                        lastName: user.lastName\n                    }\n                }\n            })\n        }\n        return list\n    }\n\n    return (\n        <Table\n            useRowSelection\n            ref={refTable}\n            rowItems={fill(5)}\n            style={{width: \"50%\", marginTop: 20}}>\n            <Column nameProperty={'button'} style={{width: 30}}></Column>\n            <Column nameProperty={'firstName'}>First Name:</Column>\n            <Column nameProperty={'lastName'}>Last Name:</Column>\n            <Column nameProperty={'age'}>Age:</Column>\n            <Column nameProperty={'email'}>Email:</Column>\n        </Table>\n    )\n}";function h(){const e=(0,r.useRef)(null),t=[];return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(s.XI,{useRowSelection:!0,ref:e,rowItems:function(n){t.length=0;for(let r=0;r<n;r++){const n={id:(0,i.A)(),age:5+r,email:"user"+r+"@user.com",firstName:"User"+r,lastName:"User LN:"+r};t.push({id:n.id,tag:n,style:{padding:3},getView:()=>({button:(0,u.jsx)("div",{onClick:()=>{c(n).then((t=>{var r;"200"===t.mode&&(null===(r=e.current)||void 0===r||r.Refresh((()=>{var t;null===(t=e.current)||void 0===t||t.SelectRowById([n.id])})))}))},children:(0,u.jsx)(a.JBV,{size:25,color:"#036239"})}),age:n.age,email:n.email,firstName:n.firstName,lastName:n.lastName})})}return t}(5),style:{width:"50%",marginTop:20},children:[(0,u.jsx)(s.VP,{nameProperty:"button",style:{width:30}}),(0,u.jsx)(s.VP,{nameProperty:"firstName",children:"First Name:"}),(0,u.jsx)(s.VP,{nameProperty:"lastName",children:"Last Name:"}),(0,u.jsx)(s.VP,{nameProperty:"age",children:"Age:"}),(0,u.jsx)(s.VP,{nameProperty:"email",children:"Email:"})]}),(0,u.jsx)("p",{children:"19-1.tsx"}),(0,u.jsx)(f.MM,{code:p}),(0,u.jsx)("p",{children:"EditUser.tsx"}),(0,u.jsx)(f.MM,{code:d})]})}},92073:(e,t,n)=>{n.d(t,{A:()=>d});const r={randomUUID:"undefined"!==typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};var s,i=new Uint8Array(16);function a(){if(!s&&!(s="undefined"!==typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(i)}for(var o=[],l=0;l<256;++l)o.push((l+256).toString(16).slice(1));function u(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}const d=function(e,t,n){if(r.randomUUID&&!t&&!e)return r.randomUUID();var s=(e=e||{}).random||(e.rng||a)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=s[i];return t}return u(s)}}}]);
//# sourceMappingURL=8259.6c0fc8fc.chunk.js.map