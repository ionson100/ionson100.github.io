"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[3598],{33598:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});var r=t(65043),u=t(60913),i=t(6720),o=t(60184),c=t(1141),l=t(70579);const s='\nimport React, {useRef} from "react";\nimport {MenuItem, TreeMenu} from "bsr-tree-virtual";\nimport "bsr-tree-virtual/dist/index.css"\nimport {MdOutlineSubdirectoryArrowRight} from "react-icons/md";\nimport {FaRegMinusSquare, FaRegPlusSquare} from "react-icons/fa";\n\n\nfunction getListItem() {\n    const listItem: MenuItem[] = [];\n    const m = new MenuItem();\n    m.content = "root"\n    for (let i = 0; i < 1000; i++) {\n       const sub_m = new MenuItem();\n       sub_m.content = "sub_item:"+i\n       m.items?.push(sub_m)\n    }\n\n    listItem.push(m)\n    return listItem;\n}\n\nexport default function P5_16() {\n    const mRefTree = useRef<InstanceType<typeof TreeMenu>>(null);\n    const mRefInput=useRef<HTMLInputElement>(null)\n    function check(){\n        if(!mRefInput.current!.value){\n            alert(\'id is empty\')\n            return false;\n        }\n        return true;\n    }\n    return (\n        <div style={{width:600}} >\n            <TreeMenu\n                ref={mRefTree}\n                height={400}\n                wight={600}\n                style={{marginTop:5}}\n                iconTree={<MdOutlineSubdirectoryArrowRight color={"black"} size={20}/>}\n                iconClose={<FaRegPlusSquare color={"black"} size={20}/>}\n                iconOpen={<FaRegMinusSquare color={"black"} size={20}/>}\n                items={getListItem()}\n                onClickMenuItem={(s,o)=>{\n                    mRefInput.current!.value=o.item!.id\n                    console.log(\'clicked: \'+o.item!.id)\n                }}\n            />\n            <br/>\n            <label>id:</label>\n            <input ref={mRefInput} type={\'text\'} style={{width:400,fontSize:18}}/>\n            <br/>\n            <br/>\n            <button onClick={()=>{\n                if(!check()) return;\n                mRefTree.current!.OpenMenuItemOnly(mRefInput.current!.value)\n            }}> Open menu only</button>\n            <button onClick={()=>{\n                if(!check()) return;\n                mRefTree.current!.OpenMenuItemAndClick(mRefInput.current!.value)\n            }}>Open menu and click</button>\n\n            <button onClick={()=>{\n                if(!check()) return;\n                const path=mRefTree.current!.GetPath(mRefInput.current!.value)\n                console.log(path)\n            }}>Get Path item</button>\n        </div>\n    )\n}\n\n\n';function m(){const e=[],n=new u.Dr;n.content="root";for(let r=0;r<1e3;r++){var t;const e=new u.Dr;e.content="sub_item:"+r,null===(t=n.items)||void 0===t||t.push(e)}return e.push(n),e}function a(){const e=(0,r.useRef)(null),n=(0,r.useRef)(null);function t(){return!!n.current.value||(alert("id is empty"),!1)}return(0,l.jsxs)("div",{style:{width:600},children:[(0,l.jsx)(u.sQ,{ref:e,height:400,wight:600,style:{marginTop:5},iconTree:(0,l.jsx)(i.UqJ,{color:"black",size:20}),iconClose:(0,l.jsx)(o.fFF,{color:"black",size:20}),iconOpen:(0,l.jsx)(o.vli,{color:"black",size:20}),items:m(),onClickMenuItem:(e,t)=>{n.current.value=t.item.id,console.log("clicked: "+t.item.id)}}),(0,l.jsx)("br",{}),(0,l.jsx)("label",{className:"label-then",children:"id:"}),(0,l.jsx)("input",{ref:n,type:"text",style:{width:400,fontSize:18}}),(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsx)("button",{onClick:()=>{t()&&e.current.OpenMenuItemOnly(n.current.value)},children:" Open menu only"}),(0,l.jsx)("button",{onClick:()=>{t()&&e.current.OpenMenuItemAndClick(n.current.value)},children:"Open menu and click"}),(0,l.jsx)("button",{onClick:()=>{if(!t())return;const r=e.current.GetPath(n.current.value);console.log(r)},children:"Get Path item"}),(0,l.jsx)("br",{}),(0,l.jsx)("div",{children:(0,l.jsx)(c.MM,{code:s})})]})}}}]);
//# sourceMappingURL=3598.ff6ed3bf.chunk.js.map