"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[6809],{79190:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});var r=t(61225),s=(t(65043),t(70579));function i(){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("details",{children:[(0,s.jsx)("summary",{style:{cursor:"pointer"},children:"Source client"}),(0,s.jsx)("div",{children:(0,s.jsx)(r.MM,{code:"import {Component} from \"react\";\nimport React from \"react\";\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport {\n    Circle as CircleStyle,\n    Fill,\n    Style,\n    Text,\n} from 'ol/style.js';\nimport {Cluster, OSM, Vector as VectorSource} from 'ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer.js';\nimport {Icon, Stroke} from \"ol/style\";\nimport {GeoJSON} from \"ol/format\";\nimport {json} from \"./map/features\"\nimport {boundingExtent} from 'ol/extent.js';\n\nconst canvasE=(w)=>{\n    const canvas = document.createElement('canvas');\n    canvas.width = w+20;\n    canvas.height = 20;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'yellow';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    return canvas;\n}\n\n\nexport default class MyMap extends Component {\n\n    constructor(props) {\n        super(props);\n        this.source = new VectorSource({});\n        this.raster = new TileLayer({\n            source: new OSM(),\n        });\n        this.clusterSource = new Cluster({\n            distance: 60,\n            minDistance: 0,\n            source: this.source,\n        });\n        this.clusters = new VectorLayer({\n            source: this.clusterSource,\n            style: this.styleFunction,\n        });\n        this.map = new Map({\n            layers: [this.raster, this.clusters],\n            view: new View({\n                center: [1608429.01, 6461053.51],\n                zoom: 14.34,\n            }),\n        });\n        this.map.on(\"pointermove\", function (evt) {\n            const hit = this.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {\n                return true;\n            });\n            if (hit) {\n                this.getTargetElement().style.cursor = 'pointer';\n            } else {\n                this.getTargetElement().style.cursor = '';\n            }\n        });\n        this.map.on('click', (e) => {\n            this.clusters.getFeatures(e.pixel).then((clickedFeatures) => {\n                if (clickedFeatures.length) {\n                    // Get clustered Coordinates\n                    const features = clickedFeatures[0].get('features');\n                    if (features.length > 1) {\n                        const extent = boundingExtent(\n                            features.map((r) => r.getGeometry().getCoordinates())\n                        );\n                        this.map.getView().fit(extent, {duration: 300, padding: [300, 300, 300, 300]});\n                    }else {\n                        alert('client id:'+ features[0].get('id')} +'\\nprice:      '+features[0].get('price'))\n                    }\n                }\n            });\n        });\n    }\n\n    styleFunction(feature) {\n        const size = feature.get('features').length;\n        if (size > 1) {\n            return new Style({\n                image: new CircleStyle({\n                    radius: 20,\n                    fill: new Fill({\n                        color: 'rgb(61,88,224)',\n                    }),\n                }),\n                text: new Text({\n                    text: size.toString(),\n                    font: 'bold 15px sans-serif',\n                    fill: new Fill({\n                        color: 'rgba(248,245,215,0.94)'\n                    })\n                }),\n            });\n        } else {\n            const originalFeature = feature.get('features')[0];\n            const str = originalFeature.get('price');\n            let w=str.length*5.5;\n            return new Style({\n                image: new Icon({\n                    img: canvasE(w)\n                }),\n                text: new Text({\n                    text: str,\n                    font: 'bold 15px Calibri,sans-serif',\n                    fill: new Fill({\n                        color: 'black',\n                    }),\n                }),\n            });\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    componentDidMount() {\n        this.map.setTarget('my-map')\n         fetch('GetFeatures').then(response=>{\n             const format = new GeoJSON();\n             const features = format.readFeatures(response.json());\n             this.source.addFeatures(features)\n         })\n    }\n\n    render() {\n        return (<div style={{width: \"100%\", height: \"100%\"}} id={'my-map'}></div>)\n    }\n}"})})]}),(0,s.jsx)("br",{}),(0,s.jsxs)("details",{children:[(0,s.jsx)("summary",{style:{cursor:"pointer"},children:"Source server"}),(0,s.jsx)("div",{children:(0,s.jsx)(r.L8,{code:'[MapTable("sale_map")]\nclass SaleMap\n{\n    [MapPrimaryKey("id", Generator.Assigned)]\n    public Guid Id { get; set; } = Guid.NewGuid();\n\n    [MapColumn("price")]\n    public decimal Price { get; set; }\n\n    [MapColumn("id_p")]\n    public Guid PublicId { get; set; }\n\n    [MapColumn("geo_shape")] public IGeoShape Shape { get; set; }\n\n}\n\nasync Task<string> GetFeatures()\n{\n    using var session = await Configure.SessionAsync;\n    var listSale = await session.Query<SaleMap>().ToListAsync();\n    List<object> listFeature = new(listSale.Count);\n    foreach (SaleMap saleMap in listSale)\n    {\n        string p = $"{saleMap.Price:C0}";\n        listFeature.Add(saleMap.Shape.GetGeoJson(new { id = saleMap.PublicId.ToString(), price = p }));\n    }\n    var collection = FactoryGeo.GetFeatureCollection(listFeature);\n    var res = JsonConvert.SerializeObject(collection);\n    return res;\n}'})})]}),(0,s.jsx)("br",{}),(0,s.jsxs)("details",{children:[(0,s.jsx)("summary",{style:{cursor:"pointer"},children:"GeoJson Features"}),(0,s.jsx)("div",{children:(0,s.jsx)(r.TC,{code:'{\n  "type": "FeatureCollection",\n  "features": [\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1608195.40566334,\n          6461203.24980751\n        ]\n      },\n      "properties": {\n        "id": "1e62e9ad-9575-4641-a25a-f2870412adc1",\n        "price": "$357,001"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606073.01192508,\n          6463206.85285146\n        ]\n      },\n      "properties": {\n        "id": "8985a34d-3b4e-4f9d-854b-ed6d67e7d58e",\n        "price": "$90,864"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606397.70648952,\n          6463191.01409222\n        ]\n      },\n      "properties": {\n        "id": "42370d22-8bc8-44d6-ae5f-4ab5b1f7ea69",\n        "price": "$469,839"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606627.36849851,\n          6463396.91796235\n        ]\n      },\n      "properties": {\n        "id": "ac6ccb88-9c4f-4252-9cdb-ca4e58ddd5bd",\n        "price": "$138,881"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606967.90182219,\n          6463682.01562868\n        ]\n      },\n      "properties": {\n        "id": "da7c4d67-b3ec-4960-812f-38dd024f69bd",\n        "price": "$11,824"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606999.57934067,\n          6463301.8854069\n        ]\n      },\n      "properties": {\n        "id": "42a8c98f-e114-4eb1-a67f-81de57e69635",\n        "price": "$39,236"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606714.48167433,\n          6462319.88233398\n        ]\n      },\n      "properties": {\n        "id": "4ec64f60-f820-4232-9b03-75308a66a30c",\n        "price": "$90,665"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1607245.0801089,\n          6462288.2048155\n        ]\n      },\n      "properties": {\n        "id": "70f4853d-9c6f-4379-b7e7-246ead4d2c31",\n        "price": "$351,594"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1606532.33594307,\n          6462058.54280651\n        ]\n      },\n      "properties": {\n        "id": "c845f1ae-23ae-415f-9a00-2d94cbaa92f4",\n        "price": "$124,766"\n      }\n    },\n    {\n      "type": "Feature",\n      "geometry": {\n        "type": "Point",\n        "coordinates": [\n          1607878.63047853,\n          6460767.68392839\n        ]\n      },\n      "properties": {\n        "id": "040dacc3-096a-422f-a553-82eddb110bba",\n        "price": "$43,764"\n      }\n    }\n  ]\n}'})})]})]})}}}]);
//# sourceMappingURL=6809.ff11238d.chunk.js.map