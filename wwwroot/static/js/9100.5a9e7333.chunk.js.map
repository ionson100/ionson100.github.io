{"version":3,"file":"static/js/9100.5a9e7333.chunk.js","mappings":"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","sources":["ViewStorage/codeSnippetJavaScript.jsx","ViewStorage/menu/confirmDialog.tsx","ViewStorage/menu/dialog/4-12.js","ViewStorage/menu/registerForm.tsx"],"sourcesContent":["\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { coldarkDark as myStyle } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\n\r\n\r\nconst CodeSnippetJavaScript = ({code}) => {\r\n    return (\r\n\r\n        <div style={{width:\"fit-content\"}}>\r\n            <SyntaxHighlighter language=\"jsx\" style={myStyle}  >\r\n                {code}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n\r\n    );\r\n};\r\nconst CodeSnippetCss = ({code}) => {\r\n    return (\r\n        <div style={{width:\"fit-content\"}}>\r\n            <SyntaxHighlighter language=\"css\" style={myStyle} >\r\n                {code}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CodeSnippetDotNet = ({code}) => {\r\n    return (\r\n\r\n        <div style={{width:\"fit-content\"}}>\r\n            <SyntaxHighlighter language=\"csharp\" style={myStyle} >\r\n                {code}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    );\r\n};\r\nexport {\r\n    CodeSnippetJavaScript,CodeSnippetCss,CodeSnippetDotNet\r\n}\r\n\r\n\r\n\r\n","import {ReactElement} from \"react\";\r\nimport {BaseBodyDialog, ShowBsrDialog} from \"bsr-modaldialog\";\r\nimport {FaUserSecret} from \"react-icons/fa\";\r\n\r\nclass ConfirmDialog extends BaseBodyDialog {\r\n    getData(mode: string | undefined): object | undefined {\r\n        return undefined;\r\n    }\r\n\r\n    validate(mode: string | undefined): boolean | undefined {\r\n        return true\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div style={{textAlign: \"center\", padding: 10}}>\r\n                    Close me<br/>\r\n                    <button onClick={() => {\r\n                        this.selfClose(\"333\")\r\n                    }}>\r\n                        selfClose\r\n                    </button>\r\n                </div>\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport async function ConfirmDialogF() {\r\n    const but: ReactElement[] = []\r\n    but.push(< button className={'button-10'} data-mode={-1} data-focus={true}>close</button>)\r\n    return (\r\n        await ShowBsrDialog({\r\n            position: 'top',\r\n            style:{width:300},\r\n            icon: <FaUserSecret/>,\r\n            header: (<span style={{paddingLeft: 30}}>Close me:</span>),\r\n            body: <ConfirmDialog/>,\r\n            buttons: but\r\n        })\r\n    )\r\n}","import React from \"react\";\r\nimport {ShowBsrDialog, BaseBodyDialog} from \"bsr-modaldialog\";\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\nimport {GetRegisterDialog} from \"../registerForm\";\r\n\r\n/*-------------------------------------*/\r\nconst code = `\r\nimport {BaseBodyDialog, ShowBsrDialog} from \"bsr-modaldialog\";\r\nimport React, {ReactElement, useRef} from \"react\";\r\nimport {FaUserSecret} from \"react-icons/fa\";\r\n\r\nexport class MyForm extends BaseBodyDialog {\r\n\r\n    public mRefFirstName: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>()\r\n    public mRefEmail: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>()\r\n    public mRefPassword: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>()\r\n    public mRefRole: React.RefObject<HTMLSelectElement> = React.createRef<HTMLSelectElement>()\r\n    public mRefError: React.RefObject<HTMLLabelElement> = React.createRef<HTMLLabelElement>();\r\n\r\n\r\n    validate(mode: string | undefined): boolean {\r\n        this.mRefError.current!.innerText = ''\r\n\r\n\r\n        if (!mode || mode === '-2' || mode === '-1') {\r\n            return true;\r\n        }\r\n\r\n        if (mode === '1') {// click register\r\n\r\n\r\n           f (this.mRefFirstName.current!.value === '') {\r\n                this.mRefError.current!.innerText = 'First name empty.'\r\n                this.mRefFirstName.current?.focus()\r\n                return false;\r\n            }\r\n            if (this.mRefEmail.current!.value === '') {\r\n                this.mRefError.current!.innerText = 'Email empty.'\r\n                this.mRefEmail.current?.focus()\r\n                return false;\r\n            }\r\n            if (this.mRefPassword.current!.value === '') {\r\n                this.mRefPassword.current?.focus()\r\n                this.mRefError.current!.innerText = 'Password empty.'\r\n                return false;\r\n            }\r\n            if (this.mRefRole.current!.selectedIndex === 0) {\r\n                this.mRefRole.current?.focus()\r\n                this.mRefError.current!.innerText = 'Role not selected.'\r\n                return false;\r\n            }\r\n\r\n            //Simulating a request to the server\r\n            setTimeout(() => {\r\n                this.selfClose('200')\r\n            }, 1000)\r\n            return false\r\n        }\r\n        return false;\r\n\r\n\r\n    }\r\n\r\n    getData(mode: string | undefined): object | undefined {\r\n        if (mode === '-1' || mode === '-2')\r\n            return undefined\r\n        return {\r\n            userName: this.mRefFirstName.current?.value,\r\n            email: this.mRefEmail.current?.value,\r\n            password: this.mRefPassword.current?.value,\r\n            role: this.mRefRole.current?.value\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.mRefFirstName!.current!.focus()// override focus button dialog :close (if there)\r\n        }, 100)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{paddingTop: 2, paddingBottom: 2}}>\r\n\r\n                <fieldset>\r\n                    <label ref={this.mRefError} style={{color: \"red\"}}/>\r\n                    <h2>Sign Up</h2>\r\n                    <div className=\"Field\">\r\n                        <label>First name <sup>*</sup></label>\r\n                        <input ref={this.mRefFirstName} placeholder=\"First name\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Last name</label>\r\n                        <input placeholder=\"Last name\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Email address <sup>*</sup></label>\r\n                        <input ref={this.mRefEmail} placeholder=\"Email address\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Password <sup>*</sup></label>\r\n                        <input ref={this.mRefPassword} type=\"password\" placeholder=\"Password\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Role <sup>*</sup></label>\r\n                        <select ref={this.mRefRole}>\r\n                            <option value=\"role\">Role</option>\r\n                            <option value=\"individual\">Individual</option>\r\n                            <option value=\"business\">Business</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                </fieldset>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function GetRegisterDialog() {\r\n    const mRefLabel = useRef<HTMLLabelElement>(null)\r\n    const but: ReactElement[] = []\r\n    but.push(<a data-mode={2} href=\"https://medium.com/@ericapantojacs/react-registration-form-d298b3b7e75d\">Visit source code</a>)\r\n     but.push(<button className={'button-10'} data-mode={100} onClick={()=>{\r\n        ConfirmDialogF()\r\n    }\r\n    }>showModal</button>)\r\n    but.push(<button className={'button-10'} data-mode={1}>register</button>)\r\n    but.push(< button className={'button-10'} data-mode={-1} data-focus={true}>close</button>);\r\n\r\n    return (\r\n        <>\r\n            <label  className={'label-then'}  ref={mRefLabel}></label>\r\n            <br/>\r\n            \r\n            <button onClick={() => {\r\n                mRefLabel.current!.innerText = ''\r\n\r\n                ShowBsrDialog({\r\n                    style: {width: 520},\r\n                    position: 'center',\r\n                    icon: <FaUserSecret/>,\r\n                    header: (<span style={{paddingLeft: 30}}>User registration:</span>),\r\n                    body: <MyForm/>,\r\n                    buttons: but\r\n                }).then(a => {\r\n                    mRefLabel.current!.innerText = JSON.stringify(a);\r\n                })\r\n            }}> Click\r\n            </button>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n`\r\n\r\n\r\n\r\n/*-------------------------------------*/\r\nclass BodyDialog extends BaseBodyDialog {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    /**\r\n     * Checking the completion of data, making a decision to continue\r\n     * @param mode data-mode attribute value\r\n     * @returns {boolean} true - continue false break\r\n     */\r\n    validate(mode) {\r\n        alert(mode)\r\n        return false; //Prevent closing dialog\r\n    }\r\n\r\n\r\n    /**\r\n     * Receiving data from a dialog to pass it outside\r\n     * @param mode data-mode attribute value\r\n     * @returns {object} data body\r\n     */\r\n    getData(mode) {\r\n\r\n        return {\r\n            data: 'self close',\r\n            mode: mode\r\n        }\r\n\r\n    }\r\n\r\n    selfClose(mode) {\r\n        super.selfClose(mode);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={() => {\r\n                this.selfClose('123')\r\n            }}> Self Close (mode:123)</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default function P4_12() {\r\n\r\n    return(\r\n            <>\r\n                <GetRegisterDialog/>\r\n                <br/>\r\n                <div>\r\n                    <CodeSnippetJavaScript code={code}/>\r\n                </div>\r\n            </>\r\n        )\r\n\r\n\r\n}\r\n\r\n","import {BaseBodyDialog, ShowBsrDialog} from \"bsr-modaldialog\";\r\nimport React, {ReactElement, useRef} from \"react\";\r\nimport {FaUserSecret} from \"react-icons/fa\";\r\nimport {ConfirmDialogF} from \"./confirmDialog\";\r\n\r\n\r\nexport class MyForm extends BaseBodyDialog {\r\n\r\n    public mRefFirstName: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>()\r\n    public mRefEmail: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>()\r\n    public mRefPassword: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>()\r\n    public mRefRole: React.RefObject<HTMLSelectElement> = React.createRef<HTMLSelectElement>()\r\n    public mRefError: React.RefObject<HTMLLabelElement> = React.createRef<HTMLLabelElement>();\r\n\r\n\r\n    validate(mode: string | undefined): boolean {\r\n        this.mRefError.current!.innerText = ''\r\n\r\n\r\n        if (mode === '100') {\r\n            return false;\r\n        }\r\n\r\n        if (!mode || mode === '-2' || mode === '-1') {\r\n            return true;\r\n        }\r\n\r\n        if (mode === '1') {// click register\r\n\r\n\r\n            if (this.mRefFirstName.current!.value === '') {\r\n                this.mRefError.current!.innerText = 'First name empty.'\r\n                this.mRefFirstName.current?.focus()\r\n                return false;\r\n            }\r\n            if (this.mRefEmail.current!.value === '') {\r\n                this.mRefError.current!.innerText = 'Email empty.'\r\n                this.mRefEmail.current?.focus()\r\n                return false;\r\n            }\r\n            if (this.mRefPassword.current!.value === '') {\r\n                this.mRefPassword.current?.focus()\r\n                this.mRefError.current!.innerText = 'Password empty.'\r\n                return false;\r\n            }\r\n            if (this.mRefRole.current!.selectedIndex === 0) {\r\n                this.mRefRole.current?.focus()\r\n                this.mRefError.current!.innerText = 'Role not selected.'\r\n                return false;\r\n            }\r\n\r\n            //Simulating a request to the server\r\n            setTimeout(() => {\r\n                this.selfClose('200')\r\n            }, 1000)\r\n            return false\r\n        }\r\n        return false;\r\n\r\n\r\n    }\r\n\r\n    getData(mode: string | undefined): object | undefined {\r\n        if (mode === '-1' || mode === '-2')\r\n            return undefined\r\n        return {\r\n            userName: this.mRefFirstName.current?.value,\r\n            email: this.mRefEmail.current?.value,\r\n            password: this.mRefPassword.current?.value,\r\n            role: this.mRefRole.current?.value\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.validate = this.validate.bind(this);\r\n        setTimeout(() => {\r\n            this.mRefFirstName!.current!.focus()// override focus button dialog :close\r\n        }, 100)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{paddingTop: 2, paddingBottom: 2}}>\r\n\r\n                <fieldset>\r\n                    <label ref={this.mRefError} style={{color: \"red\"}}/>\r\n                    <h2>Sign Up</h2>\r\n                    <div className=\"Field\">\r\n                        <label>First name <sup>*</sup></label>\r\n                        <input ref={this.mRefFirstName} placeholder=\"First name\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Last name</label>\r\n                        <input placeholder=\"Last name\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Email address <sup>*</sup></label>\r\n                        <input ref={this.mRefEmail} placeholder=\"Email address\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Password <sup>*</sup></label>\r\n                        <input ref={this.mRefPassword} type=\"password\" placeholder=\"Password\"/>\r\n                    </div>\r\n                    <div className=\"Field\">\r\n                        <label>Role <sup>*</sup></label>\r\n                        <select ref={this.mRefRole}>\r\n                            <option value=\"role\">Role</option>\r\n                            <option value=\"individual\">Individual</option>\r\n                            <option value=\"business\">Business</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                </fieldset>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function GetRegisterDialog() {\r\n    const mRefLabel = useRef<HTMLLabelElement>(null)\r\n    const but: ReactElement[] = []\r\n    but.push(<a style={{fontSize:20}} href=\"https://medium.com/@ericapantojacs/react-registration-form-d298b3b7e75d\">Visit source code</a>)\r\n    but.push(<button className={'button-10'} data-mode={100} onClick={()=>{\r\n        ConfirmDialogF()\r\n    }\r\n    }>showModal</button>)\r\n    but.push(<button className={'button-10'} data-mode={1}>register</button>)\r\n    but.push(< button className={'button-10'} data-mode={-1} data-focus={true}>close</button>);\r\n\r\n\r\n    return (\r\n        <>\r\n            <label className={'label-then'} ref={mRefLabel}></label>\r\n            <br/> <br/>\r\n            <button onClick={() => {\r\n                mRefLabel.current!.innerText = ''\r\n\r\n                ShowBsrDialog({\r\n                    style: {width: 520},\r\n                    position: 'center',\r\n                    icon: <FaUserSecret/>,\r\n                    header: (<span style={{paddingLeft: 30}}>User registration:</span>),\r\n                    body: <MyForm/>,\r\n                    buttons: but\r\n                }).then(a => {\r\n                    mRefLabel.current!.innerText = JSON.stringify(a);\r\n                })\r\n            }}> Click\r\n            </button>\r\n        </>\r\n    )\r\n}"],"names":["CodeSnippetJavaScript","_ref","code","_jsx","style","width","children","SyntaxHighlighter","language","myStyle","CodeSnippetCss","_ref2","CodeSnippetDotNet","_ref3","ConfirmDialog","BaseBodyDialog","getData","mode","validate","render","_Fragment","_jsxs","textAlign","padding","onClick","this","selfClose","async","ConfirmDialogF","but","push","className","ShowBsrDialog","position","icon","FaUserSecret","header","paddingLeft","body","buttons","P4_12","GetRegisterDialog","MyForm","constructor","arguments","mRefFirstName","React","mRefEmail","mRefPassword","mRefRole","mRefError","current","innerText","value","_this$mRefFirstName$c","focus","_this$mRefEmail$curre","_this$mRefPassword$cu","selectedIndex","_this$mRefRole$curren","setTimeout","_this$mRefFirstName$c2","_this$mRefEmail$curre2","_this$mRefPassword$cu2","_this$mRefRole$curren2","userName","email","password","role","componentDidMount","paddingTop","paddingBottom","ref","color","placeholder","type","mRefLabel","useRef","fontSize","href","then","a","JSON","stringify"],"sourceRoot":""}