"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[6923],{36923:(n,e,s)=>{s.r(e),s.d(e,{default:()=>a});var o=s(61225),t=(s(65043),s(70579));function a(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("p",{children:" Head page: "}),(0,t.jsx)("div",{children:(0,t.jsx)(o.L8,{code:'using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing ORM_1_21_;\n\n[MapTable("m_json")]\nclass MJson\n{\n    [MapPrimaryKey("id", Generator.Assigned)]\n    public Guid Id { get; set; } = Guid.NewGuid();\n\n    [MapColumn("name")]\n    public string Name { get; set; }\n\n    [MapColumn("json")]\n    [MapColumnTypeJson]\n    // or [MapColumnTypeJson(TypeReturning.AsString)]\n    [MapIndex]\n    public object Json { get; set; }\n    \n}\n\nstring? path = null;\n#if DEBUG\npath = "SqlLog.txt";\n#endif\nvar _ = new Configure("Server=localhost;Port=5432;Database=test_json;User Id=postgres;Password=postgres;",\n    ProviderName.PostgreSql, path);\nusing var session = Configure.Session;\n\nsession.DropTableIfExists<MJson>();\nsession.TableCreate<MJson>();\n//ORM: CREATE TABLE IF NOT EXISTS "m_json" (\n//"id" UUID PRIMARY KEY,\n//"name" VARCHAR(256) NULL ,\n//"json" jsonb NULL );\n//CREATE INDEX IF NOT EXISTS "idx_m_json_json_json" ON "m_json" USING GIN("json");'})}),(0,t.jsx)("br",{}),(0,t.jsxs)("details",{children:[(0,t.jsx)("summary",{children:"Insert Update"}),(0,t.jsx)("div",{children:(0,t.jsx)(o.L8,{code:'session.Insert(new MJson { Name = "NAME1", Json = new { name = "assa1", count = 34 } });\nsession.Insert(new MJson { Name = "NAME1", Json = new { name = new { simple = "simple" }, count = 25, count2 = 30 } });\nsession.Insert(new MJson { Name = "LIST", Json = new List<int> { 1, 2, 3, 4 } });\nsession.Insert(new MJson { Name = "LIST2", Json = JsonConvert.SerializeObject(new List<int> { 1, 2, 3, 4 })} );\n\nsession.Query<MJson>().Where(a => a.Name == "NAME1").Update(d => new Dictionary<object, object>\n{\n    { d.Json, new { name = "name new", count3 = 40 } }\n});\n\nsession.Query<MJson>().Where(a => a.Name == "NAME1").Update(d => new Dictionary<object, object>\n{\n    { d.Json, JsonConvert.SerializeObject(new { name = "name new", count3 = 45 }) }\n});\n\nsession.Query<MJson>().Where(a => a.Name == "NAME1").UpdateSql(d =>\n    $"{d.Json} = \'{JsonConvert.SerializeObject(new { name = "name new", count3 = 46 })}\'");'})})]}),(0,t.jsx)("br",{}),(0,t.jsxs)("details",{children:[(0,t.jsx)("summary",{children:"Select"}),(0,t.jsxs)("div",{children:[(0,t.jsxs)("p",{children:["Please note what type of output you ordered when declaring type Json.",(0,t.jsx)("br",{}),"[MapColumnTypeJson(TypeReturning.AsString)] or [MapColumnTypeJson(TypeReturning.AsObject)].",(0,t.jsx)("br",{}),"Example as [MapColumnTypeJson(TypeReturning.AsObject)]"]}),(0,t.jsx)("a",{href:"https://postgrespro.ru/docs/postgresql/9.5/functions-json",target:"_blank",children:"functions-json"}),(0,t.jsx)(o.L8,{code:'session.Insert(new MJson { Name = "NAME1", Json = new { name = "assa1", count = 34 } });\nsession.Insert(new MJson { Name = "NAME2", Json = new { name = new { simple = "simple" }, count = 25, count2 = 30 } });\n\nsession.Query<MJson>().SelectSqlE(a => $"{a.Json} -> \'name\'").ForEach(Console.WriteLine);\nList<MJson> res=session.Query<MJson>().WhereSql(a => $"{a.Json}? \'name\'").ToList();\n\nsession.Insert(new MJson { Name = "LIST1", Json = new List<int> { 1, 2, 3, 4 } });\nsession.Insert(new MJson { Name = "LIST2", Json = JsonConvert.SerializeObject(new List<int> { 1, 2, 3, 4 })} );\n\nsession.Query<MJson>().Where(a=>a.Name.StartsWith("LIST")).SelectSqlE(a => $"jsonb_array_length({a.Json})").ForEach(Console.WriteLine);\n\nvar json = session.Query<MJson>().First(a => a.Name == "LIST2").Json;\n\nforeach (JToken o in (json as JArray)!)\n{\n    Console.WriteLine(o.Value<int>());\n}'})]})]})]})}}}]);
//# sourceMappingURL=6923.7e524e85.chunk.js.map