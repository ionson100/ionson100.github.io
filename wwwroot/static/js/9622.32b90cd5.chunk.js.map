{"version":3,"file":"static/js/9622.32b90cd5.chunk.js","mappings":"wMAqDA,MAAMA,UAAkBC,EAAAA,GAAuBC,WAAAA,GAAA,SAAAC,WAAA,KACpCC,MAAM,CAAE,CACfC,SAAAA,GACIC,KAAKF,QACLE,KAAKC,kBAAkB,YAAYD,KAAKF,MAC5C,CACAI,SAAAA,GACIF,KAAKF,QACLE,KAAKC,kBAAkB,YAAYD,KAAKF,MAC5C,EAEJ,MAAMK,EAAS,IAAIT,EAEJ,MAAMU,UAAYC,EAAAA,UAAgBT,WAAAA,GAAA,SAAAC,WAAA,KACrCS,UAAUH,EAAQ,KAClBI,GAAG,GAAE,KACLC,YAAM,EAEdC,iBAAAA,GACIT,KAAKO,GAAIP,KAAKM,UAAUI,cAAa,CAACC,EAAmBb,KACrDE,KAAKQ,OAAOG,EACZX,KAAKY,SAAS,CAACd,MAAMA,GAAO,GAEpC,CACAe,oBAAAA,GACIb,KAAKM,UAAUQ,gBAAgBd,KAAKO,GACxC,CACAQ,MAAAA,GACI,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,SAAAD,SAAQlB,KAAKQ,UACbQ,EAAAA,EAAAA,MAAA,OAAKI,MAAO,CAACC,QAAQ,QAAQH,SAAA,EACzBF,EAAAA,EAAAA,MAAA,UAAQM,QAASA,IAAKtB,KAAKM,UAAUP,YAAYmB,SAAA,CAAC,eACjClB,KAAKM,UAAUR,UAGhCkB,EAAAA,EAAAA,MAAA,UAAQM,QAASA,IAAMtB,KAAKM,UAAUJ,YAAYgB,SAAA,CAAC,eAClClB,KAAKM,UAAUR,aAGpCqB,EAAAA,EAAAA,KAACI,EAAAA,GAAqB,CAACC,KAzF5B,01CA4FP,E,qEC9FJ,SAASC,EAAiBC,GAItB,IAHA,IAAIC,EAAS,GACTC,EAAa,2FAERC,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,GAAUC,EAAWE,OAAOC,KAAKC,MAFdJ,GAEoBG,KAAKE,WAEhD,OAAON,CACX,CACA,IAAIhC,EAAwC,WACxC,SAASA,IACLK,KAAKkC,UAAY,IAAIC,GACzB,CAiBA,OAhBAxC,EAAuByC,UAAUnC,kBAAoB,SAAUoC,EAAcC,GACzE,IAAIC,EAAQvC,KACZA,KAAKkC,UAAUM,SAAQ,SAAUC,GAC7BC,YAAW,WACPD,EAAME,MAAMJ,EAAO,CAACF,EAAcC,GACtC,GACJ,GACJ,EACA3C,EAAuByC,UAAU1B,aAAe,SAAUkC,GACtD,IAAIrC,EAAKkB,EAAiB,IAE1B,OADAzB,KAAKkC,UAAUW,IAAItC,EAAIqC,GAChBrC,CACX,EACAZ,EAAuByC,UAAUtB,gBAAkB,SAAUP,GACzD,QAAOP,KAAKkC,UAAUY,IAAIvC,IAAMP,KAAKkC,UAAUa,OAAOxC,EAC1D,EACOZ,CACX,CArB4C,GAsB5C,SAASqD,EAAeC,GACpB,OAAO,WACH,IAAyCC,GAAhCC,EAAAA,EAAAA,UAAS1B,EAAiB,KAAiB,GAOpD,OANA2B,EAAAA,EAAAA,YAAU,WACN,IAAI7C,EAAK0C,EAAEvC,cAAa,WAAcwC,EAAMzB,EAAiB,IAAM,IACnE,OAAO,WACHwB,EAAEnC,gBAAgBP,EACtB,CACJ,GAAG,IACI0C,CACX,CACJ,C","sources":["ViewStorage/menu/observer-2/30-3.tsx","../node_modules/bsr-observer/dist/esm/index.js"],"sourcesContent":["import {INotifyPropertyChanged} from \"bsr-observer\"\r\nimport React from \"react\";\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\n\r\nconst temp=`import {INotifyPropertyChanged} from \"bsr-observer\"\r\nimport React from \"react\";\r\n\r\n\r\nclass MSettings extends INotifyPropertyChanged {\r\n    public count=0;\r\n    increment(){\r\n        this.count++\r\n        this.OnPropertyChanged(\"increment\",this.count)\r\n    }\r\n    decrement(){\r\n        this.count--\r\n        this.OnPropertyChanged(\"decrement\",this.count)\r\n    }\r\n}\r\nconst settings=new MSettings()\r\n\r\nexport default class App extends React.Component {\r\n    private mSettings=settings\r\n    private id=''\r\n    private action:string|undefined\r\n\r\n    componentDidMount() {\r\n        this.id= this.mSettings.___addAction((s:string|undefined,count:number)=>{\r\n            this.action=s;\r\n            this.setState({count:count})\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        this.mSettings.___removeAction(this.id)\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <label>{this.action}</label>\r\n                <div style={{display:\"flex\"}} >\r\n                    <button onClick={() =>this.mSettings.increment()}>\r\n                        +1 count is {this.mSettings.count}\r\n                    </button>\r\n\r\n                    <button onClick={() => this.mSettings.decrement()}>\r\n                        -1 count is {this.mSettings.count}\r\n                    </button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}`\r\n\r\nclass MSettings extends INotifyPropertyChanged {\r\n    public count=0;\r\n    increment(){\r\n        this.count++\r\n        this.OnPropertyChanged(\"increment\",this.count)\r\n    }\r\n    decrement(){\r\n        this.count--\r\n        this.OnPropertyChanged(\"decrement\",this.count)\r\n    }\r\n}\r\nconst settings=new MSettings()\r\n\r\nexport default class App extends React.Component {\r\n    private mSettings=settings\r\n    private id=''\r\n    private action:string|undefined\r\n\r\n    componentDidMount() {\r\n        this.id= this.mSettings.___addAction((s:string|undefined,count:number)=>{\r\n            this.action=s;\r\n            this.setState({count:count})\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        this.mSettings.___removeAction(this.id)\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <label>{this.action}</label>\r\n                <div style={{display:\"flex\"}} >\r\n                    <button onClick={() =>this.mSettings.increment()}>\r\n                        +1 count is {this.mSettings.count}\r\n                    </button>\r\n\r\n                    <button onClick={() => this.mSettings.decrement()}>\r\n                        -1 count is {this.mSettings.count}\r\n                    </button>\r\n                </div>\r\n                <CodeSnippetJavaScript code={temp}/>\r\n            </>\r\n        );\r\n    }\r\n}","import { useState, useEffect } from 'react';\n\nfunction GetRandomStrings(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789<>?/|.[]@#!~`$%^&*()_-+=:\"';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\nvar INotifyPropertyChanged = /** @class */ (function () {\n    function INotifyPropertyChanged() {\n        this.mapAction = new Map();\n    }\n    INotifyPropertyChanged.prototype.OnPropertyChanged = function (propertyName, userData) {\n        var _this = this;\n        this.mapAction.forEach(function (value) {\n            setTimeout(function () {\n                value.apply(_this, [propertyName, userData]);\n            });\n        });\n    };\n    INotifyPropertyChanged.prototype.___addAction = function (a) {\n        var id = GetRandomStrings(10);\n        this.mapAction.set(id, a);\n        return id;\n    };\n    INotifyPropertyChanged.prototype.___removeAction = function (id) {\n        return this.mapAction.has(id) ? this.mapAction.delete(id) : false;\n    };\n    return INotifyPropertyChanged;\n}());\nfunction CreateObserver(o) {\n    return function () {\n        var _a = useState(GetRandomStrings(10)), setOb = _a[1];\n        useEffect(function () {\n            var id = o.___addAction(function () { setOb(GetRandomStrings(10)); });\n            return function () {\n                o.___removeAction(id);\n            };\n        }, []);\n        return o;\n    };\n}\n\nexport { CreateObserver, GetRandomStrings, INotifyPropertyChanged };\n"],"names":["MSettings","INotifyPropertyChanged","constructor","arguments","count","increment","this","OnPropertyChanged","decrement","settings","App","React","mSettings","id","action","componentDidMount","___addAction","s","setState","componentWillUnmount","___removeAction","render","_jsxs","_Fragment","children","_jsx","style","display","onClick","CodeSnippetJavaScript","code","GetRandomStrings","length","result","characters","i","charAt","Math","floor","random","mapAction","Map","prototype","propertyName","userData","_this","forEach","value","setTimeout","apply","a","set","has","delete","CreateObserver","o","setOb","useState","useEffect"],"sourceRoot":""}