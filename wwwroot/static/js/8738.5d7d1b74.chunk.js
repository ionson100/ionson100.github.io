"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[8738],{58738:(n,e,a)=>{a.r(e),a.d(e,{default:()=>l});var o=a(61225),t=(a(65043),a(70579));function l(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("p",{children:["The ability to work with geographic objects is implemented only for databases: Postgres, MySql MSSql,",(0,t.jsx)("br",{}),"Through the implementation of the IGeoShape interface.",(0,t.jsx)("br",{}),"Geographical objects implemented."]}),(0,t.jsx)("div",{children:(0,t.jsx)(o.L8,{code:"public enum GeoType\n {\n     None,\n     Point,\n     LineString,\n     Polygon,\n     MultiPoint,\n     MultiLineString,\n     MultiPolygon,\n     GeometryCollection,\n     CircularString,\n     PolygonWithHole,\n     Empty\n }"})}),(0,t.jsx)("p",{children:"Geographic Feature Methods:"}),(0,t.jsx)(o.L8,{code:"IGeoShape SetSrid(int srid);\nGeoType GeoType { get; }\nList<GeoPoint> ListGeoPoints { get; }\nobject GetGeoJson(object properties = null);\nList<IGeoShape> MultiGeoShapes { get; }\nstring StAsText();\nstring StGeometryType();\nTask<string> StGeometryTypeAsync(CancellationToken cancellationToken = default);\ndouble? StArea();\nTask<double?> StAreaAsync(CancellationToken cancellationToken = default);\nbool? StWithin(IGeoShape shape);\nTask<bool?> StWithinAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nbyte[] StAsBinary();\nTask<byte[]> StAsBinaryAsync(CancellationToken cancellationToken = default);\nIGeoShape StBoundary();\nTask<IGeoShape> StBoundaryAsync(CancellationToken cancellationToken = default);\nIGeoShape StBuffer(float distance);\nTask<IGeoShape> StBufferAsync(float distance, CancellationToken cancellationToken = default);\nIGeoShape StCentroid();\nTask<IGeoShape> StCentroidAsync(CancellationToken cancellationToken = default);\nIGeoShape StEndPoint();\nTask<IGeoShape> StEndPointAsync(CancellationToken cancellationToken = default);\nIGeoShape StEnvelope();\nTask<IGeoShape> StEnvelopeAsync(CancellationToken cancellationToken = default);\nIGeoShape StStartPoint();\nTask<IGeoShape> StStartPointAsync(CancellationToken cancellationToken = default);\nIGeoShape StSymDifference(IGeoShape shape);\nTask<IGeoShape> StSymDifferenceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nIGeoShape StUnion(IGeoShape shape);\nTask<IGeoShape> StUnionAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nbool? StContains(IGeoShape shape);\nTask<bool?> StContainsAsync(IGeoShape shape, CancellationToken cancellationToken=default);\nbool? StCrosses(IGeoShape shape);\nTask<bool?> StCrossesAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nIGeoShape StDifference(IGeoShape shape);\nTask<IGeoShape> StDifferenceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nint? StDimension();\nTask<int?> StDimensionAsync(CancellationToken cancellationToken = default);\nbool? StDisjoint(IGeoShape shape);\nTask<bool?> StDisjointAsync(IGeoShape shape, CancellationToken cancellationToken = default);\ndouble? StDistance(IGeoShape shape);\nTask<double?> StDistanceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nbool? StEquals(IGeoShape shape);\nTask<bool?> StEqualsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nbool? StIntersects(IGeoShape shape);\nTask<bool?> StIntersectsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nbool? StOverlaps(IGeoShape shape);\nTask<bool?> StOverlapsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nint? StSrid();\nbool? StTouches(IGeoShape shape);\nTask<bool?> StTouchesAsync(IGeoShape shape, CancellationToken cancellationToken = default);\nint? StNumGeometries();\nTask<int?> StNumGeometriesAsync(CancellationToken cancellationToken = default);\nint? StNumInteriorRing();\nTask<int?> StNumInteriorRingAsync(CancellationToken cancellationToken = default);\nbool? StIsSimple();\nTask<bool?> StIsSimpleAsync(CancellationToken cancellationToken = default);\nbool? StIsValid();\nTask<bool?> StIsValidAsync(CancellationToken cancellationToken = default);\ndouble? StLength();\nTask<double?> StLengthAsync(CancellationToken cancellationToken = default);\nbool? StIsClosed();\nTask<bool?> StIsClosedAsync(CancellationToken cancellationToken = default);\nint? StNumPoints();\nTask<int?> StNumPointsAsync(CancellationToken cancellationToken = default);\ndouble? StPerimeter();\nTask<double?> StPerimeterAsync(CancellationToken cancellationToken = default);\nIGeoShape StTranslate(float deltaX, float deltaY);\nTask<IGeoShape> StTranslateAsync(float deltaX, float deltaY, CancellationToken cancellationToken = default);\nIGeoShape SetSession(ISession session);\nIGeoShape StConvexHull();\nTask<IGeoShape> StConvexHullAsync(CancellationToken cancellationToken = default);\nIGeoShape StCollect(params IGeoShape[] shapes);\nIGeoShape StPointN(int n);\nTask<IGeoShape> StPointNAsync(int n, CancellationToken cancellationToken = default);\nIGeoShape StPointOnSurface();\nTask<IGeoShape> StPointOnSurfaceAsync(CancellationToken cancellationToken = default);\nIGeoShape StInteriorRingN(int n);\nTask<IGeoShape> StInteriorRingNAsync(int n, CancellationToken cancellationToken = default);\ndouble? StX();\nTask<double?> StXAsync(CancellationToken cancellationToken = default);\ndouble? StY();\nTask<double?> StYAsync(CancellationToken cancellationToken=default);\nIGeoShape StTransform(int srid);\nTask<IGeoShape> StTransformAsync(int srid, CancellationToken cancellationToken = default);\nIGeoShape StSetSRID(int srid);\nstring StAsLatLonText(string format =null );\nTask<object> StAsLatLonTextAsync(string format, CancellationToken cancellationToken = default);\nIGeoShape StReverse();\nTask<IGeoShape> StReverseAsync(CancellationToken cancellationToken = default);\nstring StIsValidReason();\nTask<string> StIsValidReasonAsync(CancellationToken cancellationToken = default);\nIGeoShape StMakeValid();\nTask<IGeoShape> StMakeValidAsync(CancellationToken cancellationToken = default);\nstring StAsGeoJson();\nTask<string> StAsGeoJsonAsync(CancellationToken cancellationToken = default);\nIGeoShape StLineSubstring(float startfraction, float endfraction);\nIGeoShape StLineInterpolatePoint(float f);\n double StLineLocatePoint(IGeoShape point);\n IGeoShape StIntersection( IGeoShape b);"})]})}}}]);
//# sourceMappingURL=8738.5d7d1b74.chunk.js.map