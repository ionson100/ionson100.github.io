"use strict";(self.webpackChunkionson100_github_io=self.webpackChunkionson100_github_io||[]).push([[757],{80757:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});var a=t(61225),r=t(70579);function o(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("p",{children:" Props BsrMap:"}),(0,r.jsx)(a.L8,{code:"type PropsBsrMap = {\n    /**\n     * options map\n     */\n    option?: OptionOSM | undefined\n\n    /**\n     * GeoJson as string\n     */\n    featuresAsJson?: string | undefined\n\n    /**\n     * Array features\n     */\n    features?: Feature<Geometry>[] | undefined\n\n    /**\n     * diw attribute id, used to form the name of the cookie\n     */\n    id?: string | undefined\n\n    /**\n     *diw style.\n     */\n    style?: React.CSSProperties | undefined,\n\n    /**\n     * Class name attribute diw map\n     */\n    className?: string | undefined\n}"}),(0,r.jsx)("p",{children:" OptionOSM:"}),(0,r.jsx)(a.L8,{code:"OptionOSM = {\n    /**\n     * Map zoom\n     */\n    zoom?: number;\n    /**\n     * map center:[latitude,longitude] ([x,y])\n     */\n    center?: Array<number>\n\n    /**\n     * Rotation map\n     */\n    rotation?:number\n\n    /**\n     * Disable double click on the map\n     */\n    removeDoubleClickZoom?: boolean\n\n    /**\n     * Map click event\n     */\n    onClick?: (map:BsrMap,feature: Feature | undefined,evt: MapBrowserEvent<any>) => void\n\n    /**\n     * Context menu call events\n     */\n    onShowContextMenu?:(map:BsrMap,feature: Feature<Geometry> | undefined,e: MouseEvent)=>void\n\n    /**\n     * Feature Edit End Events\n     */\n    onModifyEnd?:(map:BsrMap,feature: Feature<Geometry>)=>void\n\n    /**\n     * Events for finishing the creation of new Feature\n     */\n    onDrawEnd?:(map:BsrMap,feature:Feature)=>void\n\n    /**\n     * Feature drag end events on the map, (Ctrl+Shift -> mouse drag feature)\n     */\n    onDragEnd?:(map:BsrMap, feature:Feature)=>void\n\n    /**\n     * Events of the end of selection of a rectangular area on the map, used if useDrawBox = true\n     * (Ctrl -> Drawing an area with a mouse)\n     * @param features Feature that fell into the selected area\n     */\n    onDrawBoxEnd?:(map:BsrMap, features:Feature<Geometry>[],extend:Array<number>)=>void\n\n    /**\n     * Allows you to draw a rectangular area on the map. (Ctrl -> Drawing an area with a mouse)\n     */\n    useDrawBox?:boolean\n\n    /**\n     * Features styles.\n     */\n    style?:StyleSettings\n\n    /**\n     * Allows inserting map parameters into URL hash, the last data is written into cookies (cookies name 'bsr-12'+ id\n     */\n    useSynchronizationUrl?:boolean\n\n    /**\n     * URL source for loading geo json when starting the map\n     */\n    sourceUrl?:string\n\n    /**\n     * map projection. default:'EPSG:4326'\n     */\n    projection?: 'EPSG:4326'|'EPSG:3857'|string|undefined,\n}"}),(0,r.jsx)("p",{children:"StyleSettings"}),(0,r.jsx)(a.L8,{code:"type StyleSettings ={\n    /**\n     * Line color LineString. default: '#179a1c'\n     */\n    colorLineString?:string\n\n    /**\n     * Line width. default:4\n     */\n    widthLineString?:number\n\n    /**\n     * Polygon border color. default:'#07720d'\n     */\n    colorPolygon?:string\n\n    /**\n     * Polygon border width. default:3\n     */\n    widthPolygon?:number;\n\n    /**\n     * Polygon fill color. default:'#F8F9F4'\n     */\n    fillPolygon?:string\n\n    /**\n     * select Line color LineString and Circle. default:'#f80622'\n     */\n    colorLineSelect?:string\n\n    /**\n     * Select Line width LineString and Circle. default:3\n     */\n    widthLineSelect?:number\n\n    /**\n     * Polygon, Circle fill color. default:'#F8F9F4'\n     */\n    fillBodySelect?:string\n\n    /**\n     * Select Point color. default:'#b91818'\n     */\n    colorPointSelect?:string\n\n    /**\n     * Select Radius Point: default:6\n     */\n    radiusPointSelect?:number\n\n    /**\n     * Circle color. default:'#24f22e'\n     */\n    colorCircle?:string\n    \n    /**\n     * Circle fill color. default:'#dd2e2e'\n     */\n    fillCircle?:string\n\n    /**\n     * Circle border width. default:5\n     */\n    widthCircle?:number\n    \n    /**\n     * Point color. default:'#0324fb'\n     */\n    colorPoint?:string\n\n    /**\n     * Point radius. default:5\n     */\n    radiusPoint?:number\n}"}),(0,r.jsx)("p",{children:"Instance functions"}),(0,r.jsx)(a.L8,{code:"class BsrMap extends React.Component<PropsBsrMap, any> {\n\n    /**\n     * Disposal of a map object\n     * @param callback callback function\n     */\n    Dispose(callback?: () => void) {}\n\n    /**\n     * Getting a div that contains a card\n     */\n    public GetDivMap(): HTMLDivElement {}\n\n\n    /**\n     * Getting the current map projection\n     */\n    public GetCurrentEPSGProjection(): string {}\n\n    /**\n     * Canceling a geometry creation operation\n     * @param callback callback function\n     */\n    public CancelCreate(callback?: () => void):void {}\n\n    /**\n     * Rotate the map\n     * @param rotation rotation magnitude\n     */\n    public Rotation(rotation: number):void {}\n\n    /**\n     * Getting ol.VectorLayer\n     */\n    public GetVectorLayer(): VectorLayer {}\n\n    /**\n     * Getting ol.VectorSource\n     */\n    public GetVectorSource(): VectorSource {}\n\n    /**\n     * Getting ol.Map\n     */\n    public GetMap(): Map {}\n\n    /**\n     * Redrawing Feature Styles\n     */\n    public RefreshStyleFeatures():void {}\n\n    /**\n     * Overloading option styles is usually required if you have changed styles programmatically.\n     */\n    public RefreshStyleSettings():void {}\n\n    /**\n     * Redrawing feature styles into selected styles\n     * @param feature target Feature\n     */\n    public SelectFeature(feature: Feature):void {}\n\n\n    /**\n     * Redrawing features styles into selected styles\n     * @param features target Features\n     */\n    public SelectFeatures(features: Feature[]):void\n\n    /**\n     * Redrawing a card to a new position\n     * @param center center map\n     * @param zoom zoom map\n     * @param rotation rotation map\n     */\n    public GoTo(center: number[], zoom?: number, rotation?: number):void {}\n\n\n    /**\n     * Getting the current map display coordinates\n     */\n    public GetMapCoordinate(): { center?: number[], zoom?: number, rotation: number } {}\n\n    /**\n     * Getting the coordinates of a square, displaying a map in a browser, can be obtained as an object or as a json string\n     * @param isJson request as json\n     */\n    public GetBound(isJson?: boolean):{ p1?: number[], p2?: number[], p3?: number[], p4?: number[], p5?: number[] }|string {}\n\n    /**\n     * Getting features from a map, you can select the geometry type, when selecting undefined all features are selected\n     * @param geometry  'Point' | 'LineString' | 'Polygon' | 'Circle' | undefined\n     */\n    public GetFeatures(geometry: 'Point' | 'LineString' | 'Polygon' | 'Circle' | undefined):Feature[]|undefined {}\n\n    /**\n     * Adding Features to a Map\n     */\n    public AddFeatures(f: Feature[]):void {}\n\n    /**\n     * Adding Feature to a Map\n     * @param data Feature or GeoJson as string\n     */\n    public AddFeature(data: Feature | string):void {}\n\n    /**\n     * Removing Feature from a Map\n     * @param f Feature to be removed\n     */\n    public DeleteFeature(f: Feature):void {}\n\n    /**\n     * Deleting all features from the map\n     * @param callback callback function\n     */\n    public DeleteAllFeatures(callback?: () => void):void {}\n\n    /**\n     * Getting the center of feature\n     */\n    public GetCenterFeature(feature: Feature): Array<number> {}\n\n    /**\n     * Getting Feature Coordinates\n     */\n    public GetCoordinateFeature(feature: Feature):Array<any> {}\n\n    /**\n     * Getting  Feature flat Coordinates\n     */\n    public GetFlatCoordinateFeature(feature: Feature):number[] {}\n\n    /**\n     * Getting options from props\n     */\n    public GetOptions():OptionOSM {}\n\n    /**\n     * remove last point when creating a feature\n     */\n    public Undo():void {}\n\n    /**\n     * Build, create feature\n     * @param geometry 'Polygon' | 'LineString' | 'Point' | 'Circle'\n     * @return Promise<{barMap:BsrMap,isCancel:boolean,feature:Feature|undefined,geometry:string}>\n     */\n    public CreateFeature(geometry: 'Polygon' | 'LineString' | 'Point' | 'Circle'): Promise<{bsrMap: BsrMap, isCancel: boolean, feature?: Feature}>  {}\n\n    /**\n     * start edit feature\n     * @param feature Feature<Geometry>\n     * @param callback callback function\n     */\n    public StartEditFeature(feature: Feature<Geometry>, callback?: () => void):void {}\n\n\n    /**\n     * Get the map state, whether the map is in geometry editing state\n     */\n    public get IsEdit():boolean {}\n\n    /**\n     * Get the state of the map, whether the map is in the state of creating geometry\n     */\n    public get IsCreate():boolean {}\n\n    /**\n     * Subscribe to feature edit events, returns a key that can be used to unsubscribe\n     */\n    public AddEvenStateEditingFeature(fun: (stateStart: boolean, f?: Feature<Geometry>) => void):string {}\n\n    /**\n     * Unsubscribing to Feature Editing Events\n     * @param key event key\n     */\n    public RemoveEvenStateEditingFeature(key: string):void {}\n\n    /**\n     * Subscribe to feature creation events, returns a key that can be used to unsubscribe\n     */\n    public AddEventStateCreatingFeature(fun: (stateStart: boolean, f?: Feature<Geometry>) => void):string {}\n\n    /**\n     * Unsubscribing to geometry creation events\n     * @param key event key\n     */\n    public RemoveEventStateCreatingFeature(key: string):void {}\n\n    /**\n     * end of editing feature\n     */\n    public EndEditFeature(callback?: () => void):void {}\n\n    /**\n     * Transforming Feature into  geo json\n     */\n    public FeatureToJson(f: Feature):string {}\n\n    /**\n     * Transforming Feature into  geo json collection\n     */\n    public FeaturesToJson(features: Feature<Geometry>[]):string {}\n\n    /**\n     * Redrawing feature styles\n     */\n    public RefreshStyleFeature(feature: Feature) {}\n\n}"})]})}}}]);
//# sourceMappingURL=757.8f38a76b.chunk.js.map