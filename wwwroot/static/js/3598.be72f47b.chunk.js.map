{"version":3,"file":"static/js/3598.be72f47b.chunk.js","mappings":"6LAMA,MAAMA,EAAwBC,IAAa,IAAZ,KAACC,GAAKD,EACjC,OAEIE,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAACC,MAAM,eAAeC,UAC9BH,EAAAA,EAAAA,KAACI,EAAAA,EAAiB,CAACC,SAAS,MAAMJ,MAAOK,EAAAA,EAAQH,SAC5CJ,KAEH,EAIRQ,EAAiBC,IAAa,IAAZ,KAACT,GAAKS,EAC1B,OACIR,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAACC,MAAM,eAAeC,UAC9BH,EAAAA,EAAAA,KAACI,EAAAA,EAAiB,CAACC,SAAS,MAAMJ,MAAOK,EAAAA,EAAQH,SAC5CJ,KAEH,EAIRU,EAAoBC,IAAa,IAAZ,KAACX,GAAKW,EAC7B,OAEIV,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAACC,MAAM,eAAeC,UAC9BH,EAAAA,EAAAA,KAACI,EAAAA,EAAiB,CAACC,SAAS,SAASJ,MAAOK,EAAAA,EAAQH,SAC/CJ,KAEH,C,2GCzBd,MAAMA,EAAK,o7EA4EX,SAASY,IACL,MAAMC,EAAuB,GACvBC,EAAI,IAAIC,EAAAA,GACdD,EAAEE,QAAU,OACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAAC,IAADC,EAC3B,MAAMC,EAAQ,IAAIJ,EAAAA,GAClBI,EAAMH,QAAU,YAAYC,EACrB,QAAPC,EAAAJ,EAAEM,aAAK,IAAAF,GAAPA,EAASG,KAAKF,EAClB,CAGA,OADAN,EAASQ,KAAKP,GACPD,CACX,CAEe,SAASS,IACpB,MAAMC,GAAWC,EAAAA,EAAAA,QAAsC,MACjDC,GAAUD,EAAAA,EAAAA,QAAyB,MACzC,SAASE,IACL,QAAID,EAAUE,QAASC,QACnBC,MAAM,gBACC,EAGf,CACA,OACIC,EAAAA,EAAAA,MAAA,OAAK5B,MAAO,CAACC,MAAM,KAAKC,SAAA,EACpBH,EAAAA,EAAAA,KAAC8B,EAAAA,GAAQ,CACLC,IAAKT,EACLU,OAAQ,IACRC,MAAO,IACPhC,MAAO,CAACiC,UAAU,GAClBC,UAAUnC,EAAAA,EAAAA,KAACoC,EAAAA,IAA+B,CAACC,MAAO,QAASC,KAAM,KACjEC,WAAWvC,EAAAA,EAAAA,KAACwC,EAAAA,IAAe,CAACH,MAAO,QAASC,KAAM,KAClDG,UAAUzC,EAAAA,EAAAA,KAAC0C,EAAAA,IAAgB,CAACL,MAAO,QAASC,KAAM,KAClDnB,MAAOR,IACPgC,gBAAiBA,CAACC,EAAEC,KAChBrB,EAAUE,QAASC,MAAMkB,EAAEC,KAAMC,GACjCC,QAAQC,IAAI,YAAYJ,EAAEC,KAAMC,GAAG,KAG3C/C,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SAAOkD,UAAW,aAAa/C,SAAC,SAChCH,EAAAA,EAAAA,KAAA,SAAO+B,IAAKP,EAAW2B,KAAM,OAAQlD,MAAO,CAACC,MAAM,IAAIkD,SAAS,OAChEpD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAQqD,QAASA,KACT5B,KACJH,EAASI,QAAS4B,iBAAiB9B,EAAUE,QAASC,MAAM,EAC9DxB,SAAC,qBACHH,EAAAA,EAAAA,KAAA,UAAQqD,QAASA,KACT5B,KACJH,EAASI,QAAS6B,qBAAqB/B,EAAUE,QAASC,MAAM,EAClExB,SAAC,yBAEHH,EAAAA,EAAAA,KAAA,UAAQqD,QAASA,KACb,IAAI5B,IAAS,OACd,MAAM+B,EAAKlC,EAASI,QAAS+B,QAAQjC,EAAUE,QAASC,OACvDqB,QAAQC,IAAIO,EAAK,EACnBrD,SAAC,mBACHH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAACH,EAAAA,GAAqB,CAACE,KAAMA,QAI7C,C","sources":["ViewStorage/codeSnippetJavaScript.jsx","ViewStorage/menu/bsrtree/5-16.tsx"],"sourcesContent":["\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { coldarkDark as myStyle } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\n\r\n\r\nconst CodeSnippetJavaScript = ({code}) => {\r\n    return (\r\n\r\n        <div style={{width:\"fit-content\"}}>\r\n            <SyntaxHighlighter language=\"jsx\" style={myStyle}  >\r\n                {code}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n\r\n    );\r\n};\r\nconst CodeSnippetCss = ({code}) => {\r\n    return (\r\n        <div style={{width:\"fit-content\"}}>\r\n            <SyntaxHighlighter language=\"css\" style={myStyle} >\r\n                {code}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CodeSnippetDotNet = ({code}) => {\r\n    return (\r\n\r\n        <div style={{width:\"fit-content\"}}>\r\n            <SyntaxHighlighter language=\"csharp\" style={myStyle} >\r\n                {code}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    );\r\n};\r\nexport {\r\n    CodeSnippetJavaScript,CodeSnippetCss,CodeSnippetDotNet\r\n}\r\n\r\n\r\n\r\n","import React, {useRef} from \"react\";\r\nimport {MenuItem, TreeMenu} from \"bsr-tree-virtual\";\r\nimport {MdOutlineSubdirectoryArrowRight} from \"react-icons/md\";\r\nimport {FaRegMinusSquare, FaRegPlusSquare} from \"react-icons/fa\";\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\nimport {CreateItem} from \"bsr-left-sidebar\";\r\nimport { LiaElementor } from \"react-icons/lia\";\r\n\r\n/**----------------------------------------**/\r\nconst code=`\r\nimport React, {useRef} from \"react\";\r\nimport {MenuItem, TreeMenu} from \"bsr-tree-virtual\";\r\nimport \"bsr-tree-virtual/dist/index.css\"\r\nimport {MdOutlineSubdirectoryArrowRight} from \"react-icons/md\";\r\nimport {FaRegMinusSquare, FaRegPlusSquare} from \"react-icons/fa\";\r\nimport {CodeSnippetJavaScript} from \"../../codeSnippetJavaScript\";\r\n\r\nfunction getListItem() {\r\n    const listItem: MenuItem[] = [];\r\n    const m = new MenuItem();\r\n    m.content = \"root\"\r\n    for (let i = 0; i < 1000; i++) {\r\n       const sub_m = new MenuItem();\r\n       sub_m.content = \"sub_item:\"+i\r\n       m.items?.push(sub_m)\r\n    }\r\n\r\n    listItem.push(m)\r\n    return listItem;\r\n}\r\n\r\nexport default function P5_16() {\r\n    const mRefTree = useRef<InstanceType<typeof TreeMenu>>(null);\r\n    const mRefInput=useRef<HTMLInputElement>(null)\r\n    function check(){\r\n        if(!mRefInput.current!.value){\r\n            alert('id is empty')\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return (\r\n        <div style={{width:600}} >\r\n            <TreeMenu\r\n                ref={mRefTree}\r\n                height={400}\r\n                wight={600}\r\n                style={{marginTop:5}}\r\n                iconTree={<MdOutlineSubdirectoryArrowRight color={\"black\"} size={20}/>}\r\n                iconClose={<FaRegPlusSquare color={\"black\"} size={20}/>}\r\n                iconOpen={<FaRegMinusSquare color={\"black\"} size={20}/>}\r\n                items={getListItem()}\r\n                onClickMenuItem={(s,o)=>{\r\n                    mRefInput.current!.value=o.item!.id\r\n                    console.log('clicked: '+o.item!.id)\r\n                }}\r\n            />\r\n            <br/>\r\n            <label>id:</label>\r\n            <input ref={mRefInput} type={'text'} style={{width:400,fontSize:18}}/>\r\n            <br/>\r\n            <br/>\r\n            <button onClick={()=>{\r\n                if(!check()) return;\r\n                mRefTree.current!.OpenMenuItemOnly(mRefInput.current!.value)\r\n            }}> Open menu only</button>\r\n            <button onClick={()=>{\r\n                if(!check()) return;\r\n                mRefTree.current!.OpenMenuItemAndClick(mRefInput.current!.value)\r\n            }}>Open menu and click</button>\r\n\r\n            <button onClick={()=>{\r\n                if(!check()) return;\r\n                const path=mRefTree.current!.GetPath(mRefInput.current!.value)\r\n                console.log(path)\r\n            }}>Get Path item</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n`\r\n\r\n/**----------------------------------------**/\r\n\r\nfunction getListItem() {\r\n    const listItem: MenuItem[] = [];\r\n    const m = new MenuItem();\r\n    m.content = \"root\"\r\n    for (let i = 0; i < 1000; i++) {\r\n        const sub_m = new MenuItem();\r\n        sub_m.content = \"sub_item:\"+i\r\n        m.items?.push(sub_m)\r\n    }\r\n\r\n    listItem.push(m)\r\n    return listItem;\r\n}\r\n\r\nexport default function P5_16() {\r\n    const mRefTree = useRef<InstanceType<typeof TreeMenu>>(null);\r\n    const mRefInput=useRef<HTMLInputElement>(null)\r\n    function check(){\r\n        if(!mRefInput.current!.value){\r\n            alert('id is empty')\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return (\r\n        <div style={{width:600}} >\r\n            <TreeMenu\r\n                ref={mRefTree}\r\n                height={400}\r\n                wight={600}\r\n                style={{marginTop:5}}\r\n                iconTree={<MdOutlineSubdirectoryArrowRight color={\"black\"} size={20}/>}\r\n                iconClose={<FaRegPlusSquare color={\"black\"} size={20}/>}\r\n                iconOpen={<FaRegMinusSquare color={\"black\"} size={20}/>}\r\n                items={getListItem()}\r\n                onClickMenuItem={(s,o)=>{\r\n                    mRefInput.current!.value=o.item!.id\r\n                    console.log('clicked: '+o.item!.id)\r\n                }}\r\n            />\r\n            <br/>\r\n            <label className={'label-then'}>id:</label>\r\n            <input ref={mRefInput} type={'text'} style={{width:400,fontSize:18}}/>\r\n            <br/>\r\n            <br/>\r\n            <button onClick={()=>{\r\n                if(!check()) return;\r\n                mRefTree.current!.OpenMenuItemOnly(mRefInput.current!.value)\r\n            }}> Open menu only</button>\r\n            <button onClick={()=>{\r\n                if(!check()) return;\r\n                mRefTree.current!.OpenMenuItemAndClick(mRefInput.current!.value)\r\n            }}>Open menu and click</button>\r\n\r\n            <button onClick={()=>{\r\n                if(!check()) return;\r\n               const path=mRefTree.current!.GetPath(mRefInput.current!.value)\r\n                console.log(path)\r\n            }}>Get Path item</button>\r\n            <br/>\r\n            <div>\r\n                <CodeSnippetJavaScript code={code}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"names":["CodeSnippetJavaScript","_ref","code","_jsx","style","width","children","SyntaxHighlighter","language","myStyle","CodeSnippetCss","_ref2","CodeSnippetDotNet","_ref3","getListItem","listItem","m","MenuItem","content","i","_m$items","sub_m","items","push","P5_16","mRefTree","useRef","mRefInput","check","current","value","alert","_jsxs","TreeMenu","ref","height","wight","marginTop","iconTree","MdOutlineSubdirectoryArrowRight","color","size","iconClose","FaRegPlusSquare","iconOpen","FaRegMinusSquare","onClickMenuItem","s","o","item","id","console","log","className","type","fontSize","onClick","OpenMenuItemOnly","OpenMenuItemAndClick","path","GetPath"],"sourceRoot":""}