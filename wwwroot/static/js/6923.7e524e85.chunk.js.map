{"version":3,"file":"static/js/6923.7e524e85.chunk.js","mappings":"8LAIe,SAASA,IACpB,OAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBACHC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,q9BAsC7BF,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,mBACVC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,y6BAoBjCF,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAAAD,SAAU,YACVF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,yEAAqEC,EAAAA,EAAAA,KAAA,SAAK,+FACkBA,EAAAA,EAAAA,KAAA,SAAK,6DAGpGA,EAAAA,EAAAA,KAAA,KAAGG,KAAM,4DAA6DC,OAAQ,SAASL,SAAC,oBACxFC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAM,w4BA2B7C,C","sources":["ViewStorage/menu/orm/6-19.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function P6_19(){\r\n    return(\r\n\r\n        <>\r\n            <p> Head page: </p>\r\n            <div>\r\n                <CodeSnippetDotNet code={`using Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\nusing ORM_1_21_;\r\n\r\n[MapTable(\"m_json\")]\r\nclass MJson\r\n{\r\n    [MapPrimaryKey(\"id\", Generator.Assigned)]\r\n    public Guid Id { get; set; } = Guid.NewGuid();\r\n\r\n    [MapColumn(\"name\")]\r\n    public string Name { get; set; }\r\n\r\n    [MapColumn(\"json\")]\r\n    [MapColumnTypeJson]\r\n    // or [MapColumnTypeJson(TypeReturning.AsString)]\r\n    [MapIndex]\r\n    public object Json { get; set; }\r\n    \r\n}\r\n\r\nstring? path = null;\r\n#if DEBUG\r\npath = \"SqlLog.txt\";\r\n#endif\r\nvar _ = new Configure(\"Server=localhost;Port=5432;Database=test_json;User Id=postgres;Password=postgres;\",\r\n    ProviderName.PostgreSql, path);\r\nusing var session = Configure.Session;\r\n\r\nsession.DropTableIfExists<MJson>();\r\nsession.TableCreate<MJson>();\r\n//ORM: CREATE TABLE IF NOT EXISTS \"m_json\" (\r\n//\"id\" UUID PRIMARY KEY,\r\n//\"name\" VARCHAR(256) NULL ,\r\n//\"json\" jsonb NULL );\r\n//CREATE INDEX IF NOT EXISTS \"idx_m_json_json_json\" ON \"m_json\" USING GIN(\"json\");`}/>\r\n            </div>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >Insert Update</summary>\r\n                <div>\r\n                    <CodeSnippetDotNet code={`session.Insert(new MJson { Name = \"NAME1\", Json = new { name = \"assa1\", count = 34 } });\r\nsession.Insert(new MJson { Name = \"NAME1\", Json = new { name = new { simple = \"simple\" }, count = 25, count2 = 30 } });\r\nsession.Insert(new MJson { Name = \"LIST\", Json = new List<int> { 1, 2, 3, 4 } });\r\nsession.Insert(new MJson { Name = \"LIST2\", Json = JsonConvert.SerializeObject(new List<int> { 1, 2, 3, 4 })} );\r\n\r\nsession.Query<MJson>().Where(a => a.Name == \"NAME1\").Update(d => new Dictionary<object, object>\r\n{\r\n    { d.Json, new { name = \"name new\", count3 = 40 } }\r\n});\r\n\r\nsession.Query<MJson>().Where(a => a.Name == \"NAME1\").Update(d => new Dictionary<object, object>\r\n{\r\n    { d.Json, JsonConvert.SerializeObject(new { name = \"name new\", count3 = 45 }) }\r\n});\r\n\r\nsession.Query<MJson>().Where(a => a.Name == \"NAME1\").UpdateSql(d =>\r\n    $\"{d.Json} = '{JsonConvert.SerializeObject(new { name = \"name new\", count3 = 46 })}'\");`}/>\r\n                </div>\r\n            </details>\r\n\r\n            <br/>\r\n            <details>\r\n                <summary >Select</summary>\r\n                <div>\r\n                    <p>Please note what type of output you ordered when declaring type Json.<br/>\r\n                        [MapColumnTypeJson(TypeReturning.AsString)] or [MapColumnTypeJson(TypeReturning.AsObject)].<br/>\r\n                        Example as [MapColumnTypeJson(TypeReturning.AsObject)]\r\n                    </p>\r\n                    <a href={'https://postgrespro.ru/docs/postgresql/9.5/functions-json'} target={'_blank'}>functions-json</a>\r\n                    <CodeSnippetDotNet code={`session.Insert(new MJson { Name = \"NAME1\", Json = new { name = \"assa1\", count = 34 } });\r\nsession.Insert(new MJson { Name = \"NAME2\", Json = new { name = new { simple = \"simple\" }, count = 25, count2 = 30 } });\r\n\r\nsession.Query<MJson>().SelectSqlE(a => $\"{a.Json} -> 'name'\").ForEach(Console.WriteLine);\r\nList<MJson> res=session.Query<MJson>().WhereSql(a => $\"{a.Json}? 'name'\").ToList();\r\n\r\nsession.Insert(new MJson { Name = \"LIST1\", Json = new List<int> { 1, 2, 3, 4 } });\r\nsession.Insert(new MJson { Name = \"LIST2\", Json = JsonConvert.SerializeObject(new List<int> { 1, 2, 3, 4 })} );\r\n\r\nsession.Query<MJson>().Where(a=>a.Name.StartsWith(\"LIST\")).SelectSqlE(a => $\"jsonb_array_length({a.Json})\").ForEach(Console.WriteLine);\r\n\r\nvar json = session.Query<MJson>().First(a => a.Name == \"LIST2\").Json;\r\n\r\nforeach (JToken o in (json as JArray)!)\r\n{\r\n    Console.WriteLine(o.Value<int>());\r\n}`}/>\r\n                </div>\r\n            </details>\r\n\r\n\r\n\r\n        </>\r\n\r\n\r\n\r\n    )\r\n}"],"names":["P6_19","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code","href","target"],"sourceRoot":""}