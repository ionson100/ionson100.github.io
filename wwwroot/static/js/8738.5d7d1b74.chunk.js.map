{"version":3,"file":"static/js/8738.5d7d1b74.chunk.js","mappings":"8LAIe,SAASA,IACpB,OAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAEIF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,yGAAqGC,EAAAA,EAAAA,KAAA,SAAK,0DACnDA,EAAAA,EAAAA,KAAA,SAAK,wCAM/DA,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,6OAe3BF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iCACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,KAAI,+3KAyGnC,C","sources":["ViewStorage/menu/orm/6-14.tsx"],"sourcesContent":["import {CodeSnippetDotNet} from \"../../codeSnippetJavaScript\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function P6_14() {\r\n    return (\r\n\r\n        <>\r\n\r\n            <p>The ability to work with geographic objects is implemented only for databases: Postgres, MySql MSSql,<br/>\r\n                Through the implementation of the IGeoShape interface.<br/>\r\n                Geographical objects implemented.\r\n                </p>\r\n\r\n\r\n\r\n            <div>\r\n                <CodeSnippetDotNet code={`public enum GeoType\r\n {\r\n     None,\r\n     Point,\r\n     LineString,\r\n     Polygon,\r\n     MultiPoint,\r\n     MultiLineString,\r\n     MultiPolygon,\r\n     GeometryCollection,\r\n     CircularString,\r\n     PolygonWithHole,\r\n     Empty\r\n }`}/>\r\n            </div>\r\n            <p>Geographic Feature Methods:</p>\r\n            <CodeSnippetDotNet code={`IGeoShape SetSrid(int srid);\r\nGeoType GeoType { get; }\r\nList<GeoPoint> ListGeoPoints { get; }\r\nobject GetGeoJson(object properties = null);\r\nList<IGeoShape> MultiGeoShapes { get; }\r\nstring StAsText();\r\nstring StGeometryType();\r\nTask<string> StGeometryTypeAsync(CancellationToken cancellationToken = default);\r\ndouble? StArea();\r\nTask<double?> StAreaAsync(CancellationToken cancellationToken = default);\r\nbool? StWithin(IGeoShape shape);\r\nTask<bool?> StWithinAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nbyte[] StAsBinary();\r\nTask<byte[]> StAsBinaryAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StBoundary();\r\nTask<IGeoShape> StBoundaryAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StBuffer(float distance);\r\nTask<IGeoShape> StBufferAsync(float distance, CancellationToken cancellationToken = default);\r\nIGeoShape StCentroid();\r\nTask<IGeoShape> StCentroidAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StEndPoint();\r\nTask<IGeoShape> StEndPointAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StEnvelope();\r\nTask<IGeoShape> StEnvelopeAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StStartPoint();\r\nTask<IGeoShape> StStartPointAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StSymDifference(IGeoShape shape);\r\nTask<IGeoShape> StSymDifferenceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nIGeoShape StUnion(IGeoShape shape);\r\nTask<IGeoShape> StUnionAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nbool? StContains(IGeoShape shape);\r\nTask<bool?> StContainsAsync(IGeoShape shape, CancellationToken cancellationToken=default);\r\nbool? StCrosses(IGeoShape shape);\r\nTask<bool?> StCrossesAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nIGeoShape StDifference(IGeoShape shape);\r\nTask<IGeoShape> StDifferenceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nint? StDimension();\r\nTask<int?> StDimensionAsync(CancellationToken cancellationToken = default);\r\nbool? StDisjoint(IGeoShape shape);\r\nTask<bool?> StDisjointAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\ndouble? StDistance(IGeoShape shape);\r\nTask<double?> StDistanceAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nbool? StEquals(IGeoShape shape);\r\nTask<bool?> StEqualsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nbool? StIntersects(IGeoShape shape);\r\nTask<bool?> StIntersectsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nbool? StOverlaps(IGeoShape shape);\r\nTask<bool?> StOverlapsAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nint? StSrid();\r\nbool? StTouches(IGeoShape shape);\r\nTask<bool?> StTouchesAsync(IGeoShape shape, CancellationToken cancellationToken = default);\r\nint? StNumGeometries();\r\nTask<int?> StNumGeometriesAsync(CancellationToken cancellationToken = default);\r\nint? StNumInteriorRing();\r\nTask<int?> StNumInteriorRingAsync(CancellationToken cancellationToken = default);\r\nbool? StIsSimple();\r\nTask<bool?> StIsSimpleAsync(CancellationToken cancellationToken = default);\r\nbool? StIsValid();\r\nTask<bool?> StIsValidAsync(CancellationToken cancellationToken = default);\r\ndouble? StLength();\r\nTask<double?> StLengthAsync(CancellationToken cancellationToken = default);\r\nbool? StIsClosed();\r\nTask<bool?> StIsClosedAsync(CancellationToken cancellationToken = default);\r\nint? StNumPoints();\r\nTask<int?> StNumPointsAsync(CancellationToken cancellationToken = default);\r\ndouble? StPerimeter();\r\nTask<double?> StPerimeterAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StTranslate(float deltaX, float deltaY);\r\nTask<IGeoShape> StTranslateAsync(float deltaX, float deltaY, CancellationToken cancellationToken = default);\r\nIGeoShape SetSession(ISession session);\r\nIGeoShape StConvexHull();\r\nTask<IGeoShape> StConvexHullAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StCollect(params IGeoShape[] shapes);\r\nIGeoShape StPointN(int n);\r\nTask<IGeoShape> StPointNAsync(int n, CancellationToken cancellationToken = default);\r\nIGeoShape StPointOnSurface();\r\nTask<IGeoShape> StPointOnSurfaceAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StInteriorRingN(int n);\r\nTask<IGeoShape> StInteriorRingNAsync(int n, CancellationToken cancellationToken = default);\r\ndouble? StX();\r\nTask<double?> StXAsync(CancellationToken cancellationToken = default);\r\ndouble? StY();\r\nTask<double?> StYAsync(CancellationToken cancellationToken=default);\r\nIGeoShape StTransform(int srid);\r\nTask<IGeoShape> StTransformAsync(int srid, CancellationToken cancellationToken = default);\r\nIGeoShape StSetSRID(int srid);\r\nstring StAsLatLonText(string format =null );\r\nTask<object> StAsLatLonTextAsync(string format, CancellationToken cancellationToken = default);\r\nIGeoShape StReverse();\r\nTask<IGeoShape> StReverseAsync(CancellationToken cancellationToken = default);\r\nstring StIsValidReason();\r\nTask<string> StIsValidReasonAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StMakeValid();\r\nTask<IGeoShape> StMakeValidAsync(CancellationToken cancellationToken = default);\r\nstring StAsGeoJson();\r\nTask<string> StAsGeoJsonAsync(CancellationToken cancellationToken = default);\r\nIGeoShape StLineSubstring(float startfraction, float endfraction);\r\nIGeoShape StLineInterpolatePoint(float f);\r\n double StLineLocatePoint(IGeoShape point);\r\n IGeoShape StIntersection( IGeoShape b);`}/>\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}"],"names":["P6_14","_jsxs","_Fragment","children","_jsx","CodeSnippetDotNet","code"],"sourceRoot":""}